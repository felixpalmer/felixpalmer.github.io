"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6646],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var a=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(r),u=i,h=m["".concat(p,".").concat(u)]||m[u]||s[u]||n;return r?a.createElement(h,o(o({ref:t},d),{},{components:r})):a.createElement(h,o({ref:t},d))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,o=new Array(n);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<n;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},92008:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=r(87462),i=(r(67294),r(3905));const n={},o="MapView",l={unversionedId:"api-reference/core/map-view",id:"api-reference/core/map-view",title:"MapView",description:"The MapView class is a subclass of View. This viewport creates a camera that looks at a geospatial location on a map from a certain direction. The behavior of MapView is generally modeled after that of Mapbox GL JS.",source:"@site/../docs/api-reference/core/map-view.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/map-view",permalink:"/deck.gl/docs/api-reference/core/map-view",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/map-view.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"View Class",permalink:"/deck.gl/docs/api-reference/core/view"},next:{title:"GlobeView (Experimental)",permalink:"/deck.gl/docs/api-reference/core/globe-view"}},p={},c=[{value:"Constructor",id:"constructor",level:2},{value:"<code>repeat</code> (Boolean, optional)",id:"repeat",level:5},{value:"<code>nearZMultiplier</code> (Number, optional)",id:"nearzmultiplier",level:5},{value:"<code>farZMultiplier</code> (Number, optional)",id:"farzmultiplier",level:5},{value:"<code>projectionMatrix</code> (Array16, optional)",id:"projectionmatrix",level:5},{value:"<code>fovy</code> (Number, optional)",id:"fovy",level:5},{value:"<code>altitude</code> (Number, optional)",id:"altitude",level:5},{value:"<code>orthographic</code> (Boolean)",id:"orthographic",level:5},{value:"View State",id:"view-state",level:2},{value:"Controller",id:"controller",level:2},{value:"Source",id:"source",level:2}],d={toc:c},m="wrapper";function s(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mapview"},"MapView"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," class is a subclass of ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/view"},"View"),". This viewport creates a camera that looks at a geospatial location on a map from a certain direction. The behavior of ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," is generally modeled after that of Mapbox GL JS."),(0,i.kt)("p",null,"It's recommended that you read the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/views"},"Views and Projections guide")," before using this class."),(0,i.kt)("div",{style:{position:"relative",height:450}}),(0,i.kt)("div",{style:{position:"absolute",transform:"translateY(-450px)",paddingLeft:"inherit",paddingRight:"inherit",left:0,right:0}},(0,i.kt)("iframe",{height:"450",width:"100%",scrolling:"no",title:"deck.gl MapView",src:"https://codepen.io/vis-gl/embed/MWbwyWy?height=450&theme-id=light&default-tab=result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"See the Pen ",(0,i.kt)("a",{href:"https://codepen.io/vis-gl/pen/MWbwyWy"},"deck.gl MapView")," by vis.gl (",(0,i.kt)("a",{href:"https://codepen.io/vis-gl"},"@vis-gl"),") on ",(0,i.kt)("a",{href:"https://codepen.io"},"CodePen"),".")),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {MapView} from '@deck.gl/core';\nconst view = new MapView({id, ...});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," takes the same parameters as the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/view"},"View")," superclass constructor, plus the following:"),(0,i.kt)("h5",{id:"repeat"},(0,i.kt)("inlineCode",{parentName:"h5"},"repeat")," (Boolean, optional)"),(0,i.kt)("p",null,"Whether to render multiple copies of the map at low zoom levels. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h5",{id:"nearzmultiplier"},(0,i.kt)("inlineCode",{parentName:"h5"},"nearZMultiplier")," (Number, optional)"),(0,i.kt)("p",null,"Scaler for the near plane, 1 unit equals to the height of the viewport. Default to ",(0,i.kt)("inlineCode",{parentName:"p"},"0.1"),". Overwrites the ",(0,i.kt)("inlineCode",{parentName:"p"},"near")," parameter."),(0,i.kt)("h5",{id:"farzmultiplier"},(0,i.kt)("inlineCode",{parentName:"h5"},"farZMultiplier")," (Number, optional)"),(0,i.kt)("p",null,"Scaler for the far plane, 1 unit equals to the distance from the camera to the top edge of the screen. Default to ",(0,i.kt)("inlineCode",{parentName:"p"},"1.01"),". Overwrites the ",(0,i.kt)("inlineCode",{parentName:"p"},"far")," parameter."),(0,i.kt)("h5",{id:"projectionmatrix"},(0,i.kt)("inlineCode",{parentName:"h5"},"projectionMatrix")," (Array","[16]",", optional)"),(0,i.kt)("p",null,"Projection matrix."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"projectionMatrix")," is not supplied, the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," class will build a projection matrix from the following parameters:"),(0,i.kt)("h5",{id:"fovy"},(0,i.kt)("inlineCode",{parentName:"h5"},"fovy")," (Number, optional)"),(0,i.kt)("p",null,"Field of view covered by the camera, in the perspective case. In degrees. If not supplied, will be calculated from ",(0,i.kt)("inlineCode",{parentName:"p"},"altitude"),"."),(0,i.kt)("h5",{id:"altitude"},(0,i.kt)("inlineCode",{parentName:"h5"},"altitude")," (Number, optional)"),(0,i.kt)("p",null,"Distance of the camera relative to viewport height. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"1.5"),"."),(0,i.kt)("h5",{id:"orthographic"},(0,i.kt)("inlineCode",{parentName:"h5"},"orthographic")," (Boolean)"),(0,i.kt)("p",null,"Whether to create an orthographic or perspective projection matrix. Default is ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," (perspective projection)."),(0,i.kt)("h2",{id:"view-state"},"View State"),(0,i.kt)("p",null,"To render, ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," needs to be used together with a ",(0,i.kt)("inlineCode",{parentName:"p"},"viewState")," with the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"longitude")," (Number) - longitude at the map center"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"latitude")," (Number) - latitude at the map center"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zoom")," (Number) - zoom level"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pitch")," (Number, optional) - pitch angle in degrees. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (top-down)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bearing")," (Number, optional) - bearing angle in degrees. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (north)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxZoom")," (Number, optional) - max zoom level. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"20"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minZoom")," (Number, optional) - min zoom level. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxPitch")," (Number, optional) - max pitch angle. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"60"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minPitch")," (Number, optional) - min pitch angle. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,i.kt)("h2",{id:"controller"},"Controller"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"MapController")," to handle interactivity. To enable the controller, use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const view = new MapView({id: 'base-map', controller: true});\n")),(0,i.kt)("p",null,"Visit the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/map-controller"},"MapController")," documentation for a full list of supported options."),(0,i.kt)("h2",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/views/map-view.ts"},"modules/core/src/views/map-view.ts")))}s.isMDXComponent=!0}}]);