"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9298],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>u});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),s=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},c=function(e){var a=s(e.components);return r.createElement(i.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},y=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),y=n,u=d["".concat(i,".").concat(y)]||d[y]||m[y]||o;return t?r.createElement(u,p(p({ref:a},c),{},{components:t})):r.createElement(u,p({ref:a},c))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,p=new Array(o);p[0]=y;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[d]="string"==typeof e?e:n,p[1]=l;for(var s=2;s<o;s++)p[s]=t[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},70103:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),n=(t(67294),t(3905));const o={},p="MapboxLayer",l={unversionedId:"api-reference/mapbox/mapbox-layer",id:"api-reference/mapbox/mapbox-layer",title:"MapboxLayer",description:"MapboxLayer is an implementation of Mapbox GL JS's CustomLayerInterface API. By adding a MapboxLayer instance to an mapbox map, one can render any deck.gl layer inside the mapbox canvas / WebGL2 context. This is in contrast to the traditional deck.gl/mapbox integration where the deck.gl layers are rendered into a separate canvas over the base map.",source:"@site/../docs/api-reference/mapbox/mapbox-layer.md",sourceDirName:"api-reference/mapbox",slug:"/api-reference/mapbox/mapbox-layer",permalink:"/deck.gl/docs/api-reference/mapbox/mapbox-layer",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/mapbox/mapbox-layer.md",tags:[],version:"current",frontMatter:{}},i={},s=[{value:"Example",id:"example",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"setProps(props)",id:"setpropsprops",level:5}],c={toc:s},d="wrapper";function m(e){let{components:a,...t}=e;return(0,n.kt)(d,(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"mapboxlayer"},"MapboxLayer"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"MapboxLayer")," is an implementation of ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/mapbox-gl"},"Mapbox GL JS"),"'s ",(0,n.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/properties/#customlayerinterface"},"CustomLayerInterface")," API. By adding a ",(0,n.kt)("inlineCode",{parentName:"p"},"MapboxLayer")," instance to an mapbox map, one can render any deck.gl layer inside the mapbox canvas / WebGL2 context. This is in contrast to the traditional deck.gl/mapbox integration where the deck.gl layers are rendered into a separate canvas over the base map."),(0,n.kt)("p",null,"See the Mapbox ",(0,n.kt)("a",{parentName:"p",href:"https://www.mapbox.com/mapbox-gl-js/api/#map#addlayer"},(0,n.kt)("inlineCode",{parentName:"a"},"map.addLayer(layer, before?)"))," API for how to add a layer to an existing layer stack."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxLayer} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({...});\n\nconst myScatterplotLayer = new MapboxLayer({\n  id: 'my-scatterplot',\n  type: ScatterplotLayer,\n  data: [\n      {position: [-74.5, 40], size: 100}\n  ],\n  getPosition: d => d.position,\n  getRadius: d => d.size,\n  getColor: [255, 0, 0]\n});\n\n// wait for map to be ready\nmap.on('load', () => {\n  // insert before the mapbox layer \"waterway_label\"\n  map.addLayer(myScatterplotLayer, 'waterway_label');\n\n  // update the layer\n  myScatterplotLayer.setProps({\n    getColor: [0, 0, 255]\n  });\n});\n")),(0,n.kt)("h2",{id:"constructor"},"Constructor"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxLayer} from '@deck.gl/mapbox';\nnew MapboxLayer(props);\n")),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"props")," (Object)",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"props.id")," (String) - an unique id is required for each layer."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"props.type")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Layer"),", optional) - a class that extends deck.gl's base ",(0,n.kt)("inlineCode",{parentName:"li"},"Layer")," class. Required if ",(0,n.kt)("inlineCode",{parentName:"li"},"deck")," is not provided."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"props.deck")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Deck"),", optional) - a ",(0,n.kt)("inlineCode",{parentName:"li"},"Deck")," instance that controls the rendering of this layer. If provided, the layer will be looked up from its layer stack by ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," at render time, and all other props are ignored. It's recommended that you use the ",(0,n.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/mapbox/mapbox-overlay"},"MapboxOverlay")," class where a ",(0,n.kt)("inlineCode",{parentName:"li"},"Deck")," instance is automatically managed."),(0,n.kt)("li",{parentName:"ul"},"Optional: any other prop needed by this type of layer. See deck.gl's ",(0,n.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/layers/"},"layer catalog")," for documentation and examples on how to create layers.")))),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h5",{id:"setpropsprops"},"setProps(props)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"const layer = new MapboxLayer({\n    id: 'my-scatterplot',\n    type: ScatterplotLayer,\n    ...\n});\n\nmap.addLayer(layer);\n\nlayer.setProps({\n    radiusScale: 2\n});\n")),(0,n.kt)("p",null,"Update a layer after it's added. Has no effect if ",(0,n.kt)("inlineCode",{parentName:"p"},"props.deck")," is provided."))}m.isMDXComponent=!0}}]);