"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4988],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=o,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},73972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={},i="JSONConverter",s={unversionedId:"api-reference/json/json-converter",id:"api-reference/json/json-converter",title:"JSONConverter",description:"NOTE: This component is only intended to support official deck.gl API props via JSON. In particular, it is not intended to evolve an implementation of alternate JSON schemas. Support for such schemas should be developed independently, perhaps using the source code of this component as a base. See the JSON Layers RFC for more on this.",source:"@site/../docs/api-reference/json/json-converter.md",sourceDirName:"api-reference/json",slug:"/api-reference/json/json-converter",permalink:"/deck.gl/docs/api-reference/json/json-converter",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/json/json-converter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@deck.gl/json",permalink:"/deck.gl/docs/api-reference/json/overview"},next:{title:"JSONConfiguration",permalink:"/deck.gl/docs/api-reference/json/json-configuration"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>json</code> (Object|String)",id:"json",level:5},{value:"Configuration",id:"configuration",level:2}],l={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jsonconverter"},"JSONConverter"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: This component is only intended to support ",(0,o.kt)("strong",{parentName:"p"},"official deck.gl API props")," via JSON. In particular, it is not intended to evolve an implementation of alternate JSON schemas. Support for such schemas should be developed independently, perhaps using the source code of this component as a base. See the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md"},"JSON Layers RFC")," for more on this.")),(0,o.kt)("p",null,"Converts a JSON description of a deck.gl visualization into properties that can be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deck")," component."),(0,o.kt)("p",null,"Requirements on the JSON description:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Expected to contain at minimum "layers" and "initialViewState" fields.'),(0,o.kt)("li",{parentName:"ul"},"The JSON for each layer should be formatted as in described in JSONLayer.")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {JSONConverter} from '@deck.gl/json';\n\nimport json from './us-map.json';\n\nconst configuration = {\n  layers: require('@deck.gl/layers')\n};\n\nconst new jsonConverter = new JSONConverter({configuration});\n\nconst deck = new Deck({\n  canvas: 'deck-canvas',\n  json\n});\n\ndeck.setProps(jsonConverter.convert(json));\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h5",{id:"json"},(0,o.kt)("inlineCode",{parentName:"h5"},"json")," (Object|String)"),(0,o.kt)("p",null,"A JSON string or a parsed JSON structure.\nAll properties in this object, after processing, are passed to a ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"Deck")," instance as props."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"See more details in the ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/json/conversion-reference"},"Configuration Reference")," section."))}d.isMDXComponent=!0}}]);