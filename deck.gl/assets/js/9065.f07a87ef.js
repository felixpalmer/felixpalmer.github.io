"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9065],{3905:(i,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>p});var n=e(67294);function o(i,t,e){return t in i?Object.defineProperty(i,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):i[t]=e,i}function r(i,t){var e=Object.keys(i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(i);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(i,t).enumerable}))),e.push.apply(e,n)}return e}function l(i){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){o(i,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(i,t,Object.getOwnPropertyDescriptor(e,t))}))}return i}function c(i,t){if(null==i)return{};var e,n,o=function(i,t){if(null==i)return{};var e,n,o={},r=Object.keys(i);for(n=0;n<r.length;n++)e=r[n],t.indexOf(e)>=0||(o[e]=i[e]);return o}(i,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(i);for(n=0;n<r.length;n++)e=r[n],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(i,e)&&(o[e]=i[e])}return o}var h=n.createContext({}),a=function(i){var t=n.useContext(h),e=t;return i&&(e="function"==typeof i?i(t):l(l({},t),i)),e},s=function(i){var t=a(i.components);return n.createElement(h.Provider,{value:t},i.children)},g="mdxType",u={inlineCode:"code",wrapper:function(i){var t=i.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(i,t){var e=i.components,o=i.mdxType,r=i.originalType,h=i.parentName,s=c(i,["components","mdxType","originalType","parentName"]),g=a(e),d=o,p=g["".concat(h,".").concat(d)]||g[d]||u[d]||r;return e?n.createElement(p,l(l({ref:t},s),{},{components:e})):n.createElement(p,l({ref:t},s))}));function p(i,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof i||o){var r=e.length,l=new Array(r);l[0]=d;var c={};for(var h in t)hasOwnProperty.call(t,h)&&(c[h]=t[h]);c.originalType=i,c[g]="string"==typeof i?i:o,l[1]=c;for(var a=2;a<r;a++)l[a]=e[a];return n.createElement.apply(null,l)}return n.createElement.apply(null,e)}d.displayName="MDXCreateElement"},20745:(i,t,e)=>{var n=e(73935);t.s=n.createRoot,n.hydrateRoot},78542:(i,t,e)=>{function n(i){let t=1/0,e=1/0,n=1/0,o=-1/0,r=-1/0,l=-1/0;const c=i.POSITION?i.POSITION.value:[],h=c&&c.length;for(let a=0;a<h;a+=3){const i=c[a],h=c[a+1],s=c[a+2];t=i<t?i:t,e=h<e?h:e,n=s<n?s:n,o=i>o?i:o,r=h>r?h:r,l=s>l?s:l}return[[t,e,n],[o,r,l]]}e.d(t,{v:()=>n})},57111:(i,t,e)=>{e.d(t,{x:()=>r});var n=e(60326),o=e(41708);class r extends o.Z{constructor(i={}){const{id:t=(0,n.h)("sphere-geometry")}=i,{indices:e,attributes:o}=function(i){const{nlat:t=10,nlong:e=10}=i,n=0,o=Math.PI-n,r=0,l=2*Math.PI-r,c=(t+1)*(e+1),h=(t,e,n,o,r)=>i.radius||1,a=new Float32Array(3*c),s=new Float32Array(3*c),g=new Float32Array(2*c),u=new(c>65535?Uint32Array:Uint16Array)(t*e*6);for(let p=0;p<=t;p++)for(let i=0;i<=e;i++){const n=i/e,r=p/t,c=i+p*(e+1),u=2*c,d=3*c,f=l*n,v=o*r,_=Math.sin(f),b=Math.cos(f),m=Math.sin(v),C=b*m,L=Math.cos(v),A=_*m,k=h(C,L,A,n,r);a[d+0]=k*C,a[d+1]=k*L,a[d+2]=k*A,s[d+0]=C,s[d+1]=L,s[d+2]=A,g[u+0]=n,g[u+1]=1-r}const d=e+1;for(let p=0;p<e;p++)for(let i=0;i<t;i++){const e=6*(p*t+i);u[e+0]=i*d+p,u[e+1]=i*d+p+1,u[e+2]=(i+1)*d+p,u[e+3]=(i+1)*d+p,u[e+4]=i*d+p+1,u[e+5]=(i+1)*d+p+1}return{indices:{size:1,value:u},attributes:{POSITION:{size:3,value:a},NORMAL:{size:3,value:s},TEXCOORD_0:{size:2,value:g}}}}(i);super({...i,id:t,topology:"triangle-list",indices:e,attributes:{...o,...i.attributes}})}}},41708:(i,t,e)=>{e.d(t,{Z:()=>r});var n=e(60326),o=e(67532);class r{id;topology;vertexCount;indices;attributes;userData={};constructor(i){const{attributes:t={},indices:e=null,vertexCount:r=null}=i;this.id=i.id||(0,n.h)("geometry"),this.topology=i.topology,e&&(this.indices=ArrayBuffer.isView(e)?{value:e,size:1}:e),this.attributes={};for(const[n,l]of Object.entries(t)){const i=ArrayBuffer.isView(l)?{value:l}:l;(0,o.h)(ArrayBuffer.isView(i.value),`${this._print(n)}: must be typed array or object with value as typed array`),"POSITION"!==n&&"positions"!==n||i.size||(i.size=3),"indices"===n?((0,o.h)(!this.indices),this.indices=i):this.attributes[n]=i}this.indices&&void 0!==this.indices.isIndexed&&(this.indices=Object.assign({},this.indices),delete this.indices.isIndexed),this.vertexCount=r||this._calculateVertexCount(this.attributes,this.indices)}getVertexCount(){return this.vertexCount}getAttributes(){return this.indices?{indices:this.indices,...this.attributes}:this.attributes}_print(i){return`Geometry ${this.id} attribute ${i}`}_setAttributes(i,t){return this}_calculateVertexCount(i,t){if(t)return t.value.length;let e=1/0;for(const n of Object.values(i)){const{value:i,size:t,constant:o}=n;!o&&i&&t>=1&&(e=Math.min(e,i.length/t))}return(0,o.h)(Number.isFinite(e)),e}}},42013:(i,t,e)=>{e.d(t,{H:()=>l});const n="#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\nstruct AmbientLight {\nvec3 color;\n};\nstruct PointLight {\nvec3 color;\nvec3 position;\nvec3 attenuation;\n};\nstruct DirectionalLight {\nvec3 color;\nvec3 direction;\n};\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\nuniform bool lighting_uEnabled;\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\nreturn pointLight.attenuation.x\n+ pointLight.attenuation.y * distance\n+ pointLight.attenuation.z * distance * distance;\n}\n#endif\n",o={lightSources:{}};function r(i={}){const{color:t=[0,0,0],intensity:e=1}=i;return t.map((i=>i*e/255))}const l={name:"lights",vs:n,fs:n,getUniforms:function i(t=o){if("lightSources"in t){const{ambientLight:i,pointLights:e,directionalLights:n}=t.lightSources||{};return i||e&&e.length>0||n&&n.length>0?Object.assign({},function({ambientLight:i,pointLights:t=[],directionalLights:e=[]}){const n={};return n["lighting_uAmbientLight.color"]=i?r(i):[0,0,0],t.forEach(((i,t)=>{n[`lighting_uPointLight[${t}].color`]=r(i),n[`lighting_uPointLight[${t}].position`]=i.position,n[`lighting_uPointLight[${t}].attenuation`]=i.attenuation||[1,0,0]})),n.lighting_uPointLightCount=t.length,e.forEach(((i,t)=>{n[`lighting_uDirectionalLight[${t}].color`]=r(i),n[`lighting_uDirectionalLight[${t}].direction`]=i.direction})),n.lighting_uDirectionalLightCount=e.length,n}({ambientLight:i,pointLights:e,directionalLights:n}),{lighting_uEnabled:!0}):{lighting_uEnabled:!1}}if("lights"in t){const e={pointLights:[],directionalLights:[]};for(const i of t.lights||[])switch(i.type){case"ambient":e.ambientLight=i;break;case"directional":e.directionalLights?.push(i);break;case"point":e.pointLights?.push(i)}return i({lightSources:e})}return{}},defines:{MAX_LIGHTS:3}}},55098:(i,t,e)=>{e.d(t,{N:()=>c,s:()=>h});var n=e(42013);const o="uniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\nvec3 halfway_direction = normalize(light_direction + view_direction);\nfloat lambertian = dot(light_direction, normal_worldspace);\nfloat specular = 0.0;\nif (lambertian > 0.0) {\nfloat specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\nspecular = pow(specular_angle, lighting_uShininess);\n}\nlambertian = max(lambertian, 0.0);\nreturn (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\nvec3 lightColor = surfaceColor;\nif (lighting_uEnabled) {\nvec3 view_direction = normalize(cameraPosition - position_worldspace);\nlightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\nfor (int i = 0; i < MAX_LIGHTS; i++) {\nif (i >= lighting_uPointLightCount) {\nbreak;\n}\nPointLight pointLight = lighting_uPointLight[i];\nvec3 light_position_worldspace = pointLight.position;\nvec3 light_direction = normalize(light_position_worldspace - position_worldspace);\nlightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n}\nfor (int i = 0; i < MAX_LIGHTS; i++) {\nif (i >= lighting_uDirectionalLightCount) {\nbreak;\n}\nDirectionalLight directionalLight = lighting_uDirectionalLight[i];\nlightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n}\n}\nreturn lightColor;\n}\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\nvec3 lightColor = vec3(0, 0, 0);\nvec3 surfaceColor = vec3(0, 0, 0);\nif (lighting_uEnabled) {\nvec3 view_direction = normalize(cameraPosition - position_worldspace);\nfor (int i = 0; i < MAX_LIGHTS; i++) {\nif (i >= lighting_uPointLightCount) {\nbreak;\n}\nPointLight pointLight = lighting_uPointLight[i];\nvec3 light_position_worldspace = pointLight.position;\nvec3 light_direction = normalize(light_position_worldspace - position_worldspace);\nlightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n}\nfor (int i = 0; i < MAX_LIGHTS; i++) {\nif (i >= lighting_uDirectionalLightCount) {\nbreak;\n}\nDirectionalLight directionalLight = lighting_uDirectionalLight[i];\nlightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n}\n}\nreturn lightColor;\n}\n",r={};function l(i=r){if(!("material"in i))return{};const{material:t}=i;return t?function(i){const{ambient:t=.35,diffuse:e=.6,shininess:n=32,specularColor:o=[30,30,30]}=i;return{lighting_uAmbient:t,lighting_uDiffuse:e,lighting_uShininess:n,lighting_uSpecularColor:o.map((i=>i/255))}}(t):{lighting_uEnabled:!1}}const c={name:"gouraud-lighting",dependencies:[n.H],vs:o,defines:{LIGHTING_VERTEX:1},getUniforms:l},h={name:"phong-lighting",dependencies:[n.H],fs:o,defines:{LIGHTING_FRAGMENT:1},getUniforms:l}},35300:(i,t,e)=>{e.d(t,{q:()=>o});const n=new Float32Array([0,1,1,1]),o={name:"picking",vs:"uniform pickingUniforms {\nfloat isActive;\nfloat isAttribute;\nfloat isHighlightActive;\nfloat useFloatColors;\nvec3 highlightedObjectColor;\nvec4 highlightColor;\n} picking;\nout vec4 picking_vRGBcolor_Avalid;\nvec3 picking_normalizeColor(vec3 color) {\nreturn picking.useFloatColors > 0.5 ? color : color / 255.0;\n}\nvec4 picking_normalizeColor(vec4 color) {\nreturn picking.useFloatColors > 0.5 ? color : color / 255.0;\n}\nbool picking_isColorZero(vec3 color) {\nreturn dot(color, vec3(1.0)) < 0.00001;\n}\nbool picking_isColorValid(vec3 color) {\nreturn dot(color, vec3(1.0)) > 0.00001;\n}\nbool isVertexHighlighted(vec3 vertexColor) {\nvec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);\nreturn\nbool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));\n}\nvoid picking_setPickingColor(vec3 pickingColor) {\npickingColor = picking_normalizeColor(pickingColor);\nif (bool(picking.isActive)) {\npicking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\npicking_vRGBcolor_Avalid.rgb = pickingColor;\n} else {\npicking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));\n}\n}\nvoid picking_setPickingAttribute(float value) {\nif (bool(picking.isAttribute)) {\npicking_vRGBcolor_Avalid.r = value;\n}\n}\nvoid picking_setPickingAttribute(vec2 value) {\nif (bool(picking.isAttribute)) {\npicking_vRGBcolor_Avalid.rg = value;\n}\n}\nvoid picking_setPickingAttribute(vec3 value) {\nif (bool(picking.isAttribute)) {\npicking_vRGBcolor_Avalid.rgb = value;\n}\n}\n",fs:"uniform pickingUniforms {\nfloat isActive;\nfloat isAttribute;\nfloat isHighlightActive;\nfloat useFloatColors;\nvec3 highlightedObjectColor;\nvec4 highlightColor;\n} picking;\nin vec4 picking_vRGBcolor_Avalid;\nvec4 picking_filterHighlightColor(vec4 color) {\nif (picking.isActive > 0.5) {\nreturn color;\n}\nbool selected = bool(picking_vRGBcolor_Avalid.a);\nif (selected) {\nfloat highLightAlpha = picking.highlightColor.a;\nfloat blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\nfloat highLightRatio = highLightAlpha / blendedAlpha;\nvec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);\nreturn vec4(blendedRGB, blendedAlpha);\n} else {\nreturn color;\n}\n}\nvec4 picking_filterPickingColor(vec4 color) {\nif (bool(picking.isActive)) {\nif (picking_vRGBcolor_Avalid.a == 0.0) {\ndiscard;\n}\nreturn picking_vRGBcolor_Avalid;\n}\nreturn color;\n}\nvec4 picking_filterColor(vec4 color) {\nvec4 highlightColor = picking_filterHighlightColor(color);\nreturn picking_filterPickingColor(highlightColor);\n}\n",uniformTypes:{isActive:"f32",isAttribute:"f32",isHighlightActive:"f32",useFloatColors:"f32",highlightedObjectColor:"vec3<f32>",highlightColor:"vec4<f32>"},defaultUniforms:{isActive:!1,isAttribute:!1,isHighlightActive:!1,useFloatColors:!0,highlightedObjectColor:new Float32Array([0,0,0]),highlightColor:n},getUniforms:function(i={},t){const e={};if(void 0===i.highlightedObjectColor);else if(null===i.highlightedObjectColor)e.isHighlightActive=!1;else{e.isHighlightActive=!0;const t=i.highlightedObjectColor.slice(0,3);e.highlightedObjectColor=t}if(i.highlightColor){const t=Array.from(i.highlightColor,(i=>i/255));Number.isFinite(t[3])||(t[3]=1),e.highlightColor=t}void 0!==i.isActive&&(e.isActive=Boolean(i.isActive),e.isAttribute=Boolean(i.isAttribute));void 0!==i.useFloatColors&&(e.useFloatColors=Boolean(i.useFloatColors));return e}}},80503:(i,t,e)=>{e.d(t,{i:()=>c});var n=e(51394),o=e(55715),r=e(53015);const l=1e-6;class c{constructor({phi:i=0,theta:t=0,radius:e=1,bearing:n,pitch:o,altitude:r,radiusScale:l=6371e3}={}){this.phi=i,this.theta=t,this.radius=e||r||1,this.radiusScale=l||1,void 0!==n&&(this.bearing=n),void 0!==o&&(this.pitch=o),this.check()}toString(){return this.formatString(o.vc)}formatString({printTypes:i=!1}){const t=o.Bw;return`${i?"Spherical":""}[rho:${t(this.radius)},theta:${t(this.theta)},phi:${t(this.phi)}]`}equals(i){return(0,o.fS)(this.radius,i.radius)&&(0,o.fS)(this.theta,i.theta)&&(0,o.fS)(this.phi,i.phi)}exactEquals(i){return this.radius===i.radius&&this.theta===i.theta&&this.phi===i.phi}get bearing(){return 180-(0,o.RW)(this.phi)}set bearing(i){this.phi=Math.PI-(0,o.uR)(i)}get pitch(){return(0,o.RW)(this.theta)}set pitch(i){this.theta=(0,o.uR)(i)}get longitude(){return(0,o.RW)(this.phi)}get latitude(){return(0,o.RW)(this.theta)}get lng(){return(0,o.RW)(this.phi)}get lat(){return(0,o.RW)(this.theta)}get z(){return(this.radius-1)*this.radiusScale}set(i,t,e){return this.radius=i,this.phi=t,this.theta=e,this.check()}clone(){return(new c).copy(this)}copy(i){return this.radius=i.radius,this.phi=i.phi,this.theta=i.theta,this.check()}fromLngLatZ([i,t,e]){return this.radius=1+e/this.radiusScale,this.phi=(0,o.uR)(t),this.theta=(0,o.uR)(i),this.check()}fromVector3(i){return this.radius=r.kE(i),this.radius>0&&(this.theta=Math.atan2(i[0],i[1]),this.phi=Math.acos((0,o.uZ)(i[2]/this.radius,-1,1))),this.check()}toVector3(){return new n.P(0,0,this.radius).rotateX({radians:this.theta}).rotateZ({radians:this.phi})}makeSafe(){return this.phi=Math.max(l,Math.min(Math.PI-l,this.phi)),this}check(){if(!(Number.isFinite(this.phi)&&Number.isFinite(this.theta)&&this.radius>0))throw new Error("SphericalCoordinates: some fields set to invalid numbers");return this}}}}]);