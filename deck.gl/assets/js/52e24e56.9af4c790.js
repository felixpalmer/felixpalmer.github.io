"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7479],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||l;return t?n.createElement(m,i(i({ref:r},p),{},{components:t})):n.createElement(m,i({ref:r},p))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=f;var a={};for(var s in r)hasOwnProperty.call(r,s)&&(a[s]=r[s]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},73177:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const l={},i="FirstPersonController",a={unversionedId:"api-reference/core/first-person-controller",id:"api-reference/core/first-person-controller",title:"FirstPersonController",description:"Inherits from Base Controller.",source:"@site/../docs/api-reference/core/first-person-controller.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/first-person-controller",permalink:"/deck.gl/docs/api-reference/core/first-person-controller",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/first-person-controller.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GlobeController (Experimental)",permalink:"/deck.gl/docs/api-reference/core/globe-controller"},next:{title:"OrthographicController",permalink:"/deck.gl/docs/api-reference/core/orthographic-controller"}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Custom FirstPersonController",id:"custom-firstpersoncontroller",level:2},{value:"Source",id:"source",level:2}],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"firstpersoncontroller"},"FirstPersonController"),(0,o.kt)("p",null,"Inherits from ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller"},"Base Controller"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FirstPersonController")," class can be passed to either the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deck")," class's ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#controller"},"controller")," prop or a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," class's ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/view#controller"},"controller")," prop to specify that viewport interaction should be enabled."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FirstPersonController")," is the default controller for ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/first-person-view"},"FirstPersonView"),"."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Use with the default view:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, FirstPersonView} from '@deck.gl/core';\n\nnew Deck({\n  views: new FirstPersonView(),\n  controller: {keyboard: false, inertia: true},\n  initialViewState: viewState\n});\n")),(0,o.kt)("p",null,"is equivalent to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, FirstPersonView} from '@deck.gl/core';\n\nnew Deck({\n  views: new FirstPersonView({\n    controller: {keyboard: false,  inertia: true}\n  }),\n  initialViewState: viewState\n})\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("p",null,"Supports all ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller#options"},"Controller options")," with the following default behavior:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dragMode"),": default ",(0,o.kt)("inlineCode",{parentName:"li"},"'rotate'")," (drag to rotate)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dragPan"),": not effective, this view does not support panning"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"keyboard"),": arrow keys to move camera, arrow keys with shift/ctrl down to rotate, +/- to zoom")),(0,o.kt)("h2",{id:"custom-firstpersoncontroller"},"Custom FirstPersonController"),(0,o.kt)("p",null,"You can further customize the ",(0,o.kt)("inlineCode",{parentName:"p"},"FirstPersonController"),"'s behavior by extending the class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, FirstPersonView, FirstPersonController} from '@deck.gl/core';\n\nclass MyFirstPersonController extends FirstPersonController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new FirstPersonView(),\n  controller: {type: MyFirstPersonController},\n  initialViewState: viewState\n})\n")),(0,o.kt)("p",null,"See the ",(0,o.kt)("inlineCode",{parentName:"p"},"Controller")," class ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller#methods"},"documentation")," for the methods that you can use and/or override."),(0,o.kt)("h2",{id:"source"},"Source"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/controllers/first-person-controller.ts"},"modules/core/src/controllers/first-person-controller.ts")))}d.isMDXComponent=!0}}]);