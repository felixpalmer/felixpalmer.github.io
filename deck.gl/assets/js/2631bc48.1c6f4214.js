"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6455],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(a),u=n,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return a?r.createElement(k,i(i({ref:t},d),{},{components:a})):r.createElement(k,i({ref:t},d))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},15824:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=a(83117),n=(a(67294),a(3905));const l={},i="TerrainLayer",o={unversionedId:"api-reference/geo-layers/terrain-layer",id:"api-reference/geo-layers/terrain-layer",title:"TerrainLayer",description:"The TerrainLayer reconstructs mesh surfaces from height map images, e.g. Mapzen Terrain Tiles, which encodes elevation into R,G,B values.",source:"@site/../docs/api-reference/geo-layers/terrain-layer.md",sourceDirName:"api-reference/geo-layers",slug:"/api-reference/geo-layers/terrain-layer",permalink:"/deck.gl/docs/api-reference/geo-layers/terrain-layer",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/geo-layers/terrain-layer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SolidPolygonLayer",permalink:"/deck.gl/docs/api-reference/layers/solid-polygon-layer"},next:{title:"TextLayer",permalink:"/deck.gl/docs/api-reference/layers/text-layer"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Properties",id:"properties",level:2},{value:"Data Options",id:"data-options",level:3},{value:"<code>elevationData</code> (String|Array, required)",id:"elevationdata",level:5},{value:"<code>texture</code> (String|Null, optional)",id:"texture",level:5},{value:"<code>meshMaxError</code> (Number, optional)",id:"meshmaxerror",level:5},{value:"<code>elevationDecoder</code> (Object)",id:"elevationdecoder",level:5},{value:"<code>bounds</code> (Array, optional)",id:"bounds",level:5},{value:"<code>loadOptions</code> (Object, optional)",id:"loadoptions",level:5},{value:"Render Options",id:"render-options",level:3},{value:"<code>color</code> (Color, optional)",id:"color",level:5},{value:"<code>wireframe</code> (Boolean, optional)",id:"wireframe",level:5},{value:"<code>material</code> (Object, optional)",id:"material",level:5},{value:"Sub Layers",id:"sub-layers",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"terrainlayer"},"TerrainLayer"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"<TerrainLayerDemo />\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"TerrainLayer")," reconstructs mesh surfaces from height map images, e.g. ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/tilezen/joerd/blob/master/docs/formats.md"},"Mapzen Terrain Tiles"),", which encodes elevation into R,G,B values."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationData")," is supplied with a URL template, i.e. a string containing ",(0,n.kt)("inlineCode",{parentName:"p"},"'{x}'")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"'{y}'"),", it loads terrain tiles on demand using a ",(0,n.kt)("inlineCode",{parentName:"p"},"TileLayer")," and renders a mesh for each tile. If ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationData")," is an absolute URL, a single mesh is used, and the ",(0,n.kt)("inlineCode",{parentName:"p"},"bounds")," prop is required to position it into the world space."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import DeckGL from '@deck.gl/react';\nimport {TerrainLayer} from '@deck.gl/geo-layers';\n\nfunction App({viewState}) {\n  const layer = new TerrainLayer({\n    elevationDecoder: {\n      rScaler: 2,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    },\n    // Digital elevation model from https://www.usgs.gov/\n    elevationData: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain.png',\n    texture: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/terrain-mask.png',\n    bounds: [-122.5233, 37.6493, -122.3566, 37.8159],\n  });\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n")),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"To install the dependencies from NPM:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/mesh-layers @deck.gl/geo-layers\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {TerrainLayer} from '@deck.gl/geo-layers';\nnew TerrainLayer({});\n")),(0,n.kt)("p",null,"To use pre-bundled scripts:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/deck.gl@^8.0.0/dist.min.js"><\/script>\n\x3c!-- or --\x3e\n<script src="https://unpkg.com/@deck.gl/core@^8.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/mesh-layers@^8.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/geo-layers@^8.0.0/dist.min.js"><\/script>\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"new deck.TerrainLayer({});\n")),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("p",null,"When in Tiled Mode, inherits from all ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/geo-layers/tile-layer"},"TileLayer")," properties. Forwards ",(0,n.kt)("inlineCode",{parentName:"p"},"wireframe")," property to ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/mesh-layers/simple-mesh-layer"},"SimpleMeshLayer"),"."),(0,n.kt)("h3",{id:"data-options"},"Data Options"),(0,n.kt)("h5",{id:"elevationdata"},(0,n.kt)("inlineCode",{parentName:"h5"},"elevationData")," (String|Array, required)"),(0,n.kt)("p",null,"Image URL that encodes height data."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If the value is a valid URL, this layer will render a single mesh."),(0,n.kt)("li",{parentName:"ul"},"If the value is a string, and contains substrings ",(0,n.kt)("inlineCode",{parentName:"li"},"{x}")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"{y}"),", it is considered a URL template. This layer will render a ",(0,n.kt)("inlineCode",{parentName:"li"},"TileLayer")," of meshes. ",(0,n.kt)("inlineCode",{parentName:"li"},"{x}")," ",(0,n.kt)("inlineCode",{parentName:"li"},"{y}")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"{z}")," will be replaced with a tile's actual index when it is requested."),(0,n.kt)("li",{parentName:"ul"},"If the value is an array: multiple URL templates. See ",(0,n.kt)("inlineCode",{parentName:"li"},"TileLayer"),"'s ",(0,n.kt)("inlineCode",{parentName:"li"},"data")," prop documentation for use cases.")),(0,n.kt)("h5",{id:"texture"},(0,n.kt)("inlineCode",{parentName:"h5"},"texture")," (String|Null, optional)"),(0,n.kt)("p",null,"Image URL to use as the surface texture. Same schema as ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationData"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"null"))),(0,n.kt)("h5",{id:"meshmaxerror"},(0,n.kt)("inlineCode",{parentName:"h5"},"meshMaxError")," (Number, optional)"),(0,n.kt)("p",null,"Martini error tolerance in meters, smaller number results in more detailed mesh.."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"4.0"))),(0,n.kt)("h5",{id:"elevationdecoder"},(0,n.kt)("inlineCode",{parentName:"h5"},"elevationDecoder")," (Object)"),(0,n.kt)("p",null,"Parameters used to convert a pixel to elevation in meters.\nAn object containing the following fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rScaler"),": Multiplier of the red channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"gScaler"),": Multiplier of the green channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bScaler"),": Multiplier of the blue channel."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"offset"),": Translation of the sum.")),(0,n.kt)("p",null,"Each color channel (r, g, and b) is a number between ",(0,n.kt)("inlineCode",{parentName:"p"},"[0, 255]"),"."),(0,n.kt)("p",null,"For example, the Mapbox terrain service's elevation is ",(0,n.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/help/troubleshooting/access-elevation-data/#decode-data"},"encoded as follows"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"height = -10000 + ((R * 256 * 256 + G * 256 + B) * 0.1)\n")),(0,n.kt)("p",null,"The corresponding ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationDecoder")," is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "rScaler": 6553.6,\n  "gScaler": 25.6,\n  "bScaler": 0.1,\n  "offset": -10000\n}\n')),(0,n.kt)("p",null,"The default value of ",(0,n.kt)("inlineCode",{parentName:"p"},"elevationDecoder")," decodes a grayscale image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n  "rScaler": 1,\n  "gScaler": 0,\n  "bScaler": 0,\n  "offset": 0\n}\n')),(0,n.kt)("h5",{id:"bounds"},(0,n.kt)("inlineCode",{parentName:"h5"},"bounds")," (Array, optional)"),(0,n.kt)("p",null,"Bounds of the image to fit x,y coordinates into. In ",(0,n.kt)("inlineCode",{parentName:"p"},"[left, bottom, right, top]"),".\n",(0,n.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"right")," refers to the world longitude/x at the corresponding side of the image.\n",(0,n.kt)("inlineCode",{parentName:"p"},"top")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"bottom")," refers to the world latitude/y at the corresponding side of the image."),(0,n.kt)("p",null,"Must be supplied when using non-tiled elevation data."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"null"))),(0,n.kt)("h5",{id:"loadoptions"},(0,n.kt)("inlineCode",{parentName:"h5"},"loadOptions")," (Object, optional)"),(0,n.kt)("p",null,"On top of the ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/layer#loadoptions"},"default options"),", also accepts options for the following loaders:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://loaders.gl/modules/terrain/docs/api-reference/terrain-loader"},"TerrainLoader")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://loaders.gl/modules/images/docs/api-reference/image-loader"},"ImageLoader")," if the ",(0,n.kt)("inlineCode",{parentName:"li"},"texture")," prop is supplied")),(0,n.kt)("p",null,"Note that by default, the ",(0,n.kt)("inlineCode",{parentName:"p"},"TerrainLoader")," parses data using web workers, with code loaded from a ",(0,n.kt)("a",{parentName:"p",href:"https://unpkg.com"},"CDN"),". To change this behavior, see ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/loading-data#loaders-and-web-workers"},"loaders and workers"),"."),(0,n.kt)("h3",{id:"render-options"},"Render Options"),(0,n.kt)("h5",{id:"color"},(0,n.kt)("inlineCode",{parentName:"h5"},"color")," (Color, optional)"),(0,n.kt)("p",null,"Color to use if ",(0,n.kt)("inlineCode",{parentName:"p"},"texture")," is unavailable. Forwarded to ",(0,n.kt)("inlineCode",{parentName:"p"},"SimpleMeshLayer"),"'s ",(0,n.kt)("inlineCode",{parentName:"p"},"getColor")," prop."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"[255, 255, 255]"))),(0,n.kt)("h5",{id:"wireframe"},(0,n.kt)("inlineCode",{parentName:"h5"},"wireframe")," (Boolean, optional)"),(0,n.kt)("p",null,"Forwarded to ",(0,n.kt)("inlineCode",{parentName:"p"},"SimpleMeshLayer"),"'s ",(0,n.kt)("inlineCode",{parentName:"p"},"wireframe")," prop."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"false"))),(0,n.kt)("h5",{id:"material"},(0,n.kt)("inlineCode",{parentName:"h5"},"material")," (Object, optional)"),(0,n.kt)("p",null,"Forwarded to ",(0,n.kt)("inlineCode",{parentName:"p"},"SimpleMeshLayer"),"'s ",(0,n.kt)("inlineCode",{parentName:"p"},"material")," prop."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Default: ",(0,n.kt)("inlineCode",{parentName:"li"},"true"))),(0,n.kt)("h2",{id:"sub-layers"},"Sub Layers"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"TerrainLayer")," renders the following sublayers:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tiles")," - a ",(0,n.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/geo-layers/tile-layer"},"TileLayer"),". Only rendered if ",(0,n.kt)("inlineCode",{parentName:"li"},"elevationData")," is a URL template."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"mesh")," - a ",(0,n.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/mesh-layers/simple-mesh-layer"},"SimpleMeshLayer")," rendering the terrain mesh.")),(0,n.kt)("h1",{id:"source"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/tree/master/modules/geo-layers/src/terrain-layer"},"modules/geo-layers/src/terrain-layer")))}m.isMDXComponent=!0}}]);