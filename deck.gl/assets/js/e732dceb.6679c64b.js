"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7930],{71412:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"api-reference/core/widget","title":"Widget","description":"A widget is a UI component that can interact with deck.gl\'s cameras and layers. Some examples are:","source":"@site/../docs/api-reference/core/widget.md","sourceDirName":"api-reference/core","slug":"/api-reference/core/widget","permalink":"/deck.gl/docs/api-reference/core/widget","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/widget.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"AttributeManager","permalink":"/deck.gl/docs/api-reference/core/attribute-manager"},"next":{"title":"Layer Catalog Overview","permalink":"/deck.gl/docs/api-reference/layers/"}}');var c=i(74848),l=i(28453);const t={},r="Widget",s={},o=[{value:"Widget Interface",id:"widget-interface",level:2},{value:"Members",id:"members",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>props</code> (object)",id:"props",level:4},{value:"<code>viewId</code> (string | null)",id:"viewid",level:4},{value:"<code>placement</code> (string, optional)",id:"placement",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>onAdd</code>",id:"onadd",level:4},{value:"<code>onRemove</code>",id:"onremove",level:4},{value:"<code>setProps</code>",id:"setprops",level:4},{value:"<code>onViewportChange</code>",id:"onviewportchange",level:4},{value:"<code>onRedraw</code>",id:"onredraw",level:4},{value:"<code>onHover</code>",id:"onhover",level:4},{value:"<code>onClick</code>",id:"onclick",level:4},{value:"<code>onDragStart</code>",id:"ondragstart",level:4},{value:"<code>onDrag</code>",id:"ondrag",level:4},{value:"<code>onDragEnd</code>",id:"ondragend",level:4}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"widget",children:"Widget"})}),"\n",(0,c.jsx)(n.p,{children:"A widget is a UI component that can interact with deck.gl's cameras and layers. Some examples are:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"A tooltip that follows the pointer and provide information for the hovered object"}),"\n",(0,c.jsx)(n.li,{children:"A marker pinned to a geo-location containing HTML content"}),"\n",(0,c.jsx)(n.li,{children:"Buttons to manipulate the camera, such as +/- zoom buttons, a compass rose for the MapView, a gimble widget for the OrbitView, etc."}),"\n",(0,c.jsx)(n.li,{children:"A legend that offers visual comparison of sizes, colors etc. corresponding to the rendered layers and viewport. For example a distance ruler, a color scale for the HeatmapLayer, etc."}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["You may find many ready-to-use widgets in the ",(0,c.jsx)(n.code,{children:"@deck.gl/widgets"})," module."]}),"\n",(0,c.jsxs)(n.p,{children:["A widget is expected to implement the ",(0,c.jsx)(n.code,{children:"Widget"})," interface. Here is a custom widget that shows a spinner while layers are loading:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"import {Deck, Widget} from '@deck.gl/core';\n\nclass LoadingIndicator implements Widget {\n  element?: HTMLDivElement;\n  size: number;\n\n  constructor(options: {\n    size: number;\n  }) {\n    this.size = options.size;\n  }\n\n  onAdd() {\n    const el = document.createElement('div');\n    el.className = 'spinner';\n    el.style.width = `${this.size}px`;\n    // TODO - create animation for .spinner in the CSS stylesheet\n    this.element = el;\n    return el;\n  }\n\n  onRedraw({layers}) {\n    const isVisible = layers.some(layer => !layer.isLoaded);\n    this.element.style.display = isVisible ? 'block' : 'none';\n  }\n}\n\nnew Deck({\n  widgets: [new LoadingIndicator({size: 48})]\n});\n"})}),"\n",(0,c.jsx)(n.h2,{id:"widget-interface",children:"Widget Interface"}),"\n",(0,c.jsxs)(n.p,{children:["When a widget instance is added to Deck, the user can optionally specify a ",(0,c.jsx)(n.code,{children:"viewId"})," that it is attached to (default ",(0,c.jsx)(n.code,{children:"null"}),"). If assigned, this widget will only respond to events occurred inside the specific view that matches this id."]}),"\n",(0,c.jsx)(n.h3,{id:"members",children:"Members"}),"\n",(0,c.jsxs)(n.p,{children:["A ",(0,c.jsx)(n.code,{children:"Widget"})," implements the following members."]}),"\n",(0,c.jsx)(n.h4,{id:"id",children:(0,c.jsx)(n.code,{children:"id"})}),"\n",(0,c.jsx)(n.p,{children:"Unique identifier of the widget."}),"\n",(0,c.jsxs)(n.h4,{id:"props",children:[(0,c.jsx)(n.code,{children:"props"})," (object)"]}),"\n",(0,c.jsxs)(n.p,{children:["Any options for the widget, as passed into the constructor and can be updated with ",(0,c.jsx)(n.code,{children:"setProps"}),"."]}),"\n",(0,c.jsxs)(n.h4,{id:"viewid",children:[(0,c.jsx)(n.code,{children:"viewId"})," (string | null)"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Default: ",(0,c.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["The id of the view that the widget is attached to. If ",(0,c.jsx)(n.code,{children:"null"}),", the widget receives events from all views. Otherwise, it only receives events from the view that matches this id."]}),"\n",(0,c.jsxs)(n.h4,{id:"placement",children:[(0,c.jsx)(n.code,{children:"placement"})," (string, optional)"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Default: ",(0,c.jsx)(n.code,{children:"'top-left'"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Widget positioning within the view. One of:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"'top-left'"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"'top-right'"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"'bottom-left'"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"'bottom-right'"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.code,{children:"'fill'"})}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,c.jsx)(n.h4,{id:"onadd",children:(0,c.jsx)(n.code,{children:"onAdd"})}),"\n",(0,c.jsx)(n.p,{children:"Required. Called when the widget is added to a Deck instance."}),"\n",(0,c.jsx)(n.p,{children:"Receives the following arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"context"})," (object)","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"deck"})," (Deck) - the Deck instance that this widget is being attached to."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"viewId"})," (string | null) - the view id that this widget is being attached to."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Returns an optional UI element that should be appended to the Deck container."}),"\n",(0,c.jsx)(n.h4,{id:"onremove",children:(0,c.jsx)(n.code,{children:"onRemove"})}),"\n",(0,c.jsx)(n.p,{children:"Optional. Called when the widget is removed."}),"\n",(0,c.jsx)(n.h4,{id:"setprops",children:(0,c.jsx)(n.code,{children:"setProps"})}),"\n",(0,c.jsx)(n.p,{children:"Optional. Called to update widget options."}),"\n",(0,c.jsx)(n.h4,{id:"onviewportchange",children:(0,c.jsx)(n.code,{children:"onViewportChange"})}),"\n",(0,c.jsxs)(n.p,{children:["Op\u2020ional. Called when the containing view is changed. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if any viewport changes."]}),"\n",(0,c.jsx)(n.p,{children:"Receives the following arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"viewport"})," (Viewport) - the viewport that has changed"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"onredraw",children:(0,c.jsx)(n.code,{children:"onRedraw"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when the containing view is redrawn. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if anything redraws."]}),"\n",(0,c.jsx)(n.p,{children:"Receives the following arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"params"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"viewports"})," (Viewport[]) - the viewports that are being redrawn"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"layers"})," (Layer[]) - the layers that are being redrawn"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"onhover",children:(0,c.jsx)(n.code,{children:"onHover"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when a hover event occurs in the containing view. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if hover occurs in any view."]}),"\n",(0,c.jsx)(n.p,{children:"Receives arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"info"})," - the ",(0,c.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being hovered."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"onclick",children:(0,c.jsx)(n.code,{children:"onClick"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when a click event occurs in the containing view. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if click occurs in any view."]}),"\n",(0,c.jsx)(n.p,{children:"Receives arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"info"})," - the ",(0,c.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being clicked."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"ondragstart",children:(0,c.jsx)(n.code,{children:"onDragStart"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when a dragstart event occurs in the containing view. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,c.jsx)(n.p,{children:"Receives arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"info"})," - the ",(0,c.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"ondrag",children:(0,c.jsx)(n.code,{children:"onDrag"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when a drag event occurs in the containing view. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,c.jsx)(n.p,{children:"Receives arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"info"})," - the ",(0,c.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"event"})," - the original gesture event"]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"ondragend",children:(0,c.jsx)(n.code,{children:"onDragEnd"})}),"\n",(0,c.jsxs)(n.p,{children:["Optional. Called when a dragend event occurs in the containing view. If ",(0,c.jsx)(n.code,{children:"viewId: null"}),", will be called if drag occurs in any view."]}),"\n",(0,c.jsx)(n.p,{children:"Receives arguments:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"info"})," - the ",(0,c.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/interactivity#the-pickinginfo-object",children:"picking info"})," describing the object being dragged."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"event"})," - the original gesture event"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var d=i(96540);const c={},l=d.createContext(c);function t(e){const n=d.useContext(l);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),d.createElement(l.Provider,{value:n},e.children)}}}]);