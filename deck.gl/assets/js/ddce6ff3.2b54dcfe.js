"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2674],{19481:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"api-reference/test-utils/generate-layer-tests","title":"generateLayerTests","description":"This utility generates a series of test cases to be used with testLayer that checks the conformance of a layer class.","source":"@site/../docs/api-reference/test-utils/generate-layer-tests.md","sourceDirName":"api-reference/test-utils","slug":"/api-reference/test-utils/generate-layer-tests","permalink":"/deck.gl/docs/api-reference/test-utils/generate-layer-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/test-utils/generate-layer-tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"@deck.gl/test-utils","permalink":"/deck.gl/docs/api-reference/test-utils/overview"},"next":{"title":"testLayer","permalink":"/deck.gl/docs/api-reference/test-utils/test-layer"}}');var n=s(74848),a=s(28453);const c={},l="generateLayerTests",i={},o=[{value:"Example",id:"example",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"generatelayertests",children:"generateLayerTests"})}),"\n",(0,n.jsxs)(t.p,{children:["This utility generates a series of test cases to be used with ",(0,n.jsx)(t.a,{href:"/deck.gl/docs/api-reference/test-utils/test-layer",children:"testLayer"})," that checks the conformance of a layer class."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsxs)(t.p,{children:["Example of layer unit tests using ",(0,n.jsx)(t.code,{children:"tape"}),". The test utility itself is test framework agnostic."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import test from 'tape-promise/tape';\nimport {testLayer, generateLayerTests} from '@deck.gl/test-utils';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\ntest('GeoJsonLayer#tests', t => {\n  \n  const testCases = generateLayerTests({\n    Layer: GeoJsonLayer,\n    sampleProps: {\n      data: SAMPLE_GEOJSON\n    },\n    assert: ({layer, subLayers}) => {\n      t.ok(layer.state.features, 'should update features');\n      t.is(subLayers.length, layer.props.stroked ? 2 : 1, 'correct number of sublayers');\n    }\n  });\n\n  testLayer({Layer: GeoJsonLayer, testCases});\n\n  t.end();\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"generateLayerTests({Layer, sampleProps, assert, onError});\n"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Layer"})," (object) - the layer component class to test"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"sampleProps"})," (object, Optional) - a list of props to use as the basis for all generated tests. Can be used to supply a meaningful set of ",(0,n.jsx)(t.code,{children:"data"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"assert"})," (Function, optional) - callback when checking a condition. Receives two arguments:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"condition"})," - a value that is expected to be truthy"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"comment"})," (string) - information about the check"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"onBeforeUpdate"})," - custom callback to be added to each ",(0,n.jsx)(t.a,{href:"/deck.gl/docs/api-reference/test-utils/test-layer",children:"test case"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"onAfterUpdate"})," - custom callback to be added to each ",(0,n.jsx)(t.a,{href:"/deck.gl/docs/api-reference/test-utils/test-layer",children:"test case"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>l});var r=s(96540);const n={},a=r.createContext(n);function c(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);