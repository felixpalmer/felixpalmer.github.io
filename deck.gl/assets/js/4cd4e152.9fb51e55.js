"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6309],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),u=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(n),m=r,k=s["".concat(p,".").concat(m)]||s[m]||c[m]||a;return n?i.createElement(k,l(l({ref:t},d),{},{components:n})):i.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const a={},l="GlobeViewport (Experimental)",o={unversionedId:"api-reference/core/globe-viewport",id:"api-reference/core/globe-viewport",title:"GlobeViewport (Experimental)",description:"The GlobeViewport class takes globe view states (latitude, longitude, and zoom), and performs projections between world and screen coordinates. It is a helper class for visualizing the earth as a 3D globe.",source:"@site/../docs/api-reference/core/globe-viewport.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/globe-viewport",permalink:"/deck.gl/docs/api-reference/core/globe-viewport",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/globe-viewport.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Viewport",permalink:"/deck.gl/docs/api-reference/core/viewport"},next:{title:"WebMercatorViewport",permalink:"/deck.gl/docs/api-reference/core/web-mercator-viewport"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>project</code>",id:"project",level:5},{value:"<code>unproject</code>",id:"unproject",level:5},{value:"Source",id:"source",level:2}],d={toc:u},s="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"globeviewport-experimental"},"GlobeViewport (Experimental)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobeViewport")," class takes globe view states (",(0,r.kt)("inlineCode",{parentName:"p"},"latitude"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"longitude"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"zoom"),"), and performs projections between world and screen coordinates. It is a helper class for visualizing the earth as a 3D globe."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobeViewport")," instance is created under the hood by a ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/globe-view"},"GlobeView"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {_GlobeViewport as GlobeViewport} from '@deck.gl/core';\n\nconst viewport = new GlobeViewport({\n  width: 600,\n  height: 400,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 12\n});\n\nviewport.project([-122.45, 37.78]);\n// [300,200]\n")),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"new GlobeViewport({width, height, longitude, latitude, zoom});\n")),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"opts")," (Object) - Globe viewport options"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," (Number) - Width of the viewport."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height")," (Number) - Height of the viewport.")),(0,r.kt)("p",{parentName:"li"},"geospatial arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"latitude")," (Number, optional) - Latitude of the viewport center on map. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"longitude")," (Number, optional) - Longitude of the viewport center on map. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zoom")," (Number, optional) - Map zoom (scale is calculated as ",(0,r.kt)("inlineCode",{parentName:"li"},"2^zoom"),"). Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"11"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"altitude")," (Number, optional) - Altitude of camera, 1 unit equals to the height of the viewport. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"1.5"),".")),(0,r.kt)("p",{parentName:"li"},"projection matrix arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nearZMultiplier")," (Number, optional) - Scaler for the near plane, 1 unit equals to the height of the viewport. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"0.1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"farZMultiplier")," (Number, optional) - Scaler for the far plane, 1 unit equals to the distance from the camera to the top edge of the screen. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),".")))),(0,r.kt)("p",null,"Remarks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"height")," are forced to 1 if supplied as 0, to avoid division by zero. This is intended to reduce the burden of apps to check values before instantiating a ",(0,r.kt)("inlineCode",{parentName:"li"},"Viewport"),"."),(0,r.kt)("li",{parentName:"ul"},"Per cartographic tradition, longitudes and latitudes are specified as degrees.")),(0,r.kt)("p",null,"Inherits all ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/viewport#methods"},"Viewport methods"),"."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Inherits all methods from ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/viewport"},"Viewport"),"."),(0,r.kt)("h5",{id:"project"},(0,r.kt)("inlineCode",{parentName:"h5"},"project")),(0,r.kt)("p",null,"Projects world coordinates to pixel coordinates on screen."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"coordinates")," (Array) - ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude, altitude]"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"altitude")," is in meters and default to ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," if not supplied."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opts")," (Object)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topLeft")," (Boolean, optional) - Whether projected coords are top left. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),".")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]")," in pixels coordinates. ",(0,r.kt)("inlineCode",{parentName:"li"},"z")," is pixel depth.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude: altitude]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]"),".")))),(0,r.kt)("h5",{id:"unproject"},(0,r.kt)("inlineCode",{parentName:"h5"},"unproject")),(0,r.kt)("p",null,"Unproject pixel coordinates on screen into world coordinates."),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pixels")," (Array) - ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]")," in pixel coordinates. Passing a ",(0,r.kt)("inlineCode",{parentName:"li"},"z")," is optional."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opts")," (Object)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topLeft")," (Boolean, optional) - Whether projected coords are top left. Default to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"targetZ")," (Number, optional) - If pixel depth ",(0,r.kt)("inlineCode",{parentName:"li"},"z")," is not specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"pixels"),", this is used as the elevation plane to unproject onto. Default ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")))),(0,r.kt)("p",null,"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude]")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude, altitude]")," in world coordinates. ",(0,r.kt)("inlineCode",{parentName:"li"},"altitude")," is in meters.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," without specifying ",(0,r.kt)("inlineCode",{parentName:"li"},"opts.targetZ"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y]")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"opts.targetZ"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude, targetZ]"),"."),(0,r.kt)("li",{parentName:"ul"},"If input is ",(0,r.kt)("inlineCode",{parentName:"li"},"[x, y, z]"),": returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[longitude, latitude, altitude]"),".")))),(0,r.kt)("h2",{id:"source"},"Source"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/viewports/globe-viewport.ts"},"modules/core/src/viewports/globe-viewport.ts")))}c.isMDXComponent=!0}}]);