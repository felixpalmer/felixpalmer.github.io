"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6602],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?n.createElement(f,i(i({ref:r},s),{},{components:t})):n.createElement(f,i({ref:r},s))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59724:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const a={},i="LinearInterpolator",l={unversionedId:"api-reference/core/linear-interpolator",id:"api-reference/core/linear-interpolator",title:"LinearInterpolator",description:"Performs simple linear interpolation between two view states. Implements TransitionInterpolator.",source:"@site/../docs/api-reference/core/linear-interpolator.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/linear-interpolator",permalink:"/deck.gl/docs/api-reference/core/linear-interpolator",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/linear-interpolator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OrbitController",permalink:"/deck.gl/docs/api-reference/core/orbit-controller"},next:{title:"FlyToInterpolator",permalink:"/deck.gl/docs/api-reference/core/fly-to-interpolator"}},p={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Source",id:"source",level:2}],s={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"linearinterpolator"},"LinearInterpolator"),(0,o.kt)("p",null,"Performs simple linear interpolation between two view states. Implements ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/transition-interpolator"},"TransitionInterpolator"),"."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/view-state-transitions"},"View State Transitions")," for usage examples."),(0,o.kt)("h2",{id:"constructor"},"Constructor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {LinearInterpolator} from '@deck.gl/core';\n\nnew LinearInterpolator({transitionProps: ['target', 'zoom']});\n")),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"options (Object)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transitionProps")," (Array, optional) - Array of prop names that should be linearly interpolated. Default ",(0,o.kt)("inlineCode",{parentName:"li"},"['longitude', 'latitude', 'zoom', 'bearing', 'pitch']"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"around")," (Array, optional) - A point to zoom/rotate around, ",(0,o.kt)("inlineCode",{parentName:"li"},"[x, y]")," in screen pixels. If provided, the location at this point will not move during the transition."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"makeViewport")," (Function, optional) - Called to construct a ",(0,o.kt)("a",{parentName:"li",href:"/deck.gl/docs/api-reference/core/viewport"},"viewport"),", e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"props => new WebMercatorViewport(props)"),". Must be provided if ",(0,o.kt)("inlineCode",{parentName:"li"},"around")," is used.")))),(0,o.kt)("h2",{id:"source"},"Source"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/transitions/linear-interpolator.ts"},"modules/core/src/transitions/linear-interpolator.ts")))}d.isMDXComponent=!0}}]);