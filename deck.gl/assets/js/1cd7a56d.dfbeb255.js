"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4252],{62070:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"api-reference/carto/heatmap-tile-layer","title":"HeatmapTileLayer (Experimental)","description":"HeatmapTileLayer is a layer for visualizing point data aggregated using the Quadbin Spatial Index using a heatmap.","source":"@site/../docs/api-reference/carto/heatmap-tile-layer.md","sourceDirName":"api-reference/carto","slug":"/api-reference/carto/heatmap-tile-layer","permalink":"/deck.gl/docs/api-reference/carto/heatmap-tile-layer","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/heatmap-tile-layer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"H3TileLayer","permalink":"/deck.gl/docs/api-reference/carto/h3-tile-layer"},"next":{"title":"QuadbinTileLayer","permalink":"/deck.gl/docs/api-reference/carto/quadbin-tile-layer"}}');var l=i(74848),s=i(28453);const r={},t="HeatmapTileLayer (Experimental)",c={},o=[{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>data</code> (TilejsonResult)",id:"data",level:4},{value:"Render Options",id:"render-options",level:3},{value:"<code>radiusPixels</code> (number, optional) transition-enabled",id:"radiuspixels",level:4},{value:"<code>colorDomain</code> (number[2], optional) transition-enabled",id:"colordomain",level:4},{value:"<code>colorRange</code> (Color[], optional)",id:"colorrange",level:4},{value:"<code>intensity</code> (number, optional) transition-enabled",id:"intensity",level:4},{value:"Data Accessors",id:"data-accessors",level:3},{value:"<code>getWeight</code> (Accessor&lt;number&gt;, optional)",id:"getweight",level:4},{value:"Callbacks",id:"callbacks",level:3},{value:"<code>onMaxDensityChange</code> (Function, optional)",id:"onmaxdensitychange",level:4},{value:"Example",id:"example",level:5}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"heatmaptilelayer-experimental",children:"HeatmapTileLayer (Experimental)"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"HeatmapTileLayer"})," is a layer for visualizing point data aggregated using the ",(0,l.jsx)(n.a,{href:"https://docs.carto.com/data-and-analysis/analytics-toolbox-for-bigquery/key-concepts/spatial-indexes#quadbin",children:"Quadbin Spatial Index"})," using a heatmap."]}),"\n",(0,l.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"import DeckGL from '@deck.gl/react';\nimport {HeatmapTileLayer, quadbinTableSource} from '@deck.gl/carto';\n\nfunction App({viewState}) {\n  const data = quadbinTableSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.quadbin'\n  });\n\n  const layer = new HeatmapTileLayer({\n    data,\n    getWeight: d => d.properties.count\n  })\n\n  return <DeckGL viewState={viewState} layers={[layer]} />;\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.p,{children:"To install the dependencies from NPM:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install deck.gl\n# or\nnpm install @deck.gl/core @deck.gl/layers @deck.gl/carto\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import {HeatmapTileLayer} from '@deck.gl/carto';\nnew HeatmapTileLayer({});\n"})}),"\n",(0,l.jsx)(n.p,{children:"To use pre-bundled scripts:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-html",children:'<script src="https://unpkg.com/deck.gl@^9.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js"><\/script>\n\n\x3c!-- or --\x3e\n<script src="https://unpkg.com/@deck.gl/core@^9.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/layers@^9.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/geo-layers@^9.0.0/dist.min.js"><\/script>\n<script src="https://unpkg.com/@deck.gl/carto@^9.0.0/dist.min.js"><\/script>\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"new deck.carto.HeatmapTileLayer({});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsxs)(n.p,{children:["Inherits from all ",(0,l.jsx)(n.a,{href:"/deck.gl/docs/api-reference/core/layer",children:"Base Layer"})," and ",(0,l.jsx)(n.a,{href:"/deck.gl/docs/api-reference/core/composite-layer",children:"CompositeLayer"})," properties."]}),"\n",(0,l.jsxs)(n.h4,{id:"data",children:[(0,l.jsx)(n.code,{children:"data"})," (TilejsonResult)"]}),"\n",(0,l.jsxs)(n.p,{children:["Required. A valid ",(0,l.jsx)(n.code,{children:"TilejsonResult"})," object."]}),"\n",(0,l.jsxs)(n.p,{children:["Use one of the following ",(0,l.jsx)(n.a,{href:"/deck.gl/docs/api-reference/carto/data-sources",children:"Data Sources"})," to fetch this from the CARTO API:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./data-sources#quadbintablesource",children:"quadbinTableSource"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./data-sources#quadbinquerysource",children:"quadbinQuerySource"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"./data-sources#quadbintilesetsource",children:"quadbinTilesetSource"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"render-options",children:"Render Options"}),"\n",(0,l.jsxs)(n.h4,{id:"radiuspixels",children:[(0,l.jsx)(n.code,{children:"radiusPixels"})," (number, optional) ",(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square%22",alt:"transition-enabled"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"20"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Radius of the heatmap blur in pixels, to which the weight of a cell is distributed."}),"\n",(0,l.jsxs)(n.h4,{id:"colordomain",children:[(0,l.jsx)(n.code,{children:"colorDomain"})," (number[2], optional) ",(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square%22",alt:"transition-enabled"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"[0, 1]"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Controls how weight values are mapped to the ",(0,l.jsx)(n.code,{children:"colorRange"}),", as an array of two numbers [",(0,l.jsx)(n.code,{children:"minValue"}),", ",(0,l.jsx)(n.code,{children:"maxValue"}),"]. The values are normalized, with a value of ",(0,l.jsx)(n.code,{children:"1"})," corresponding to the maximum density present in the viewport."]}),"\n",(0,l.jsxs)(n.p,{children:["When ",(0,l.jsx)(n.code,{children:"colorDomain"})," is specified, a pixel with ",(0,l.jsx)(n.code,{children:"minValue"})," is assigned the first color in ",(0,l.jsx)(n.code,{children:"colorRange"}),", a pixel with ",(0,l.jsx)(n.code,{children:"maxValue"})," is assigned the last color in ",(0,l.jsx)(n.code,{children:"colorRange"}),", and any value in between is interpolated. Pixels in the bottom 10% of the range defined by ",(0,l.jsx)(n.code,{children:"colorDomain"})," are gradually faded out by reducing alpha, until 100% transparency at ",(0,l.jsx)(n.code,{children:"minValue"}),". Pixels with weight more than ",(0,l.jsx)(n.code,{children:"maxValue"})," are capped to the last color in ",(0,l.jsx)(n.code,{children:"colorRange"}),"."]}),"\n",(0,l.jsxs)(n.h4,{id:"colorrange",children:[(0,l.jsx)(n.code,{children:"colorRange"})," (Color[], optional)"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.a,{href:"http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6",children:"colorbrewer"})," ",(0,l.jsx)(n.code,{children:"6-class YlOrRd"})," ",(0,l.jsx)("img",{src:"https://deck.gl/images/colorbrewer_YlOrRd_6.png"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The color palette used in the heatmap, as an array of colors [color1, color2, ...]. Each color is in the format of ",(0,l.jsx)(n.code,{children:"[r, g, b]"}),". Each channel is a number between 0-255."]}),"\n",(0,l.jsxs)(n.h4,{id:"intensity",children:[(0,l.jsx)(n.code,{children:"intensity"})," (number, optional) ",(0,l.jsx)(n.img,{src:"https://img.shields.io/badge/transition-enabled-green.svg?style=flat-square%22",alt:"transition-enabled"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"1"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Value that is multiplied with the total weight at a pixel to obtain the final weight. A value larger than ",(0,l.jsx)(n.code,{children:"1"})," biases the output color towards the higher end of the spectrum, and a value less than ",(0,l.jsx)(n.code,{children:"1"})," biases the output color towards the lower end of the spectrum."]}),"\n",(0,l.jsx)(n.h3,{id:"data-accessors",children:"Data Accessors"}),"\n",(0,l.jsxs)(n.h4,{id:"getweight",children:[(0,l.jsx)(n.code,{children:"getWeight"})," (",(0,l.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/using-layers#accessors",children:"Accessor<number>"}),", optional)"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"1"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Method called to retrieve weight of each quadbin cell. By default each cell will use a weight of ",(0,l.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"callbacks",children:"Callbacks"}),"\n",(0,l.jsxs)(n.h4,{id:"onmaxdensitychange",children:[(0,l.jsx)(n.code,{children:"onMaxDensityChange"})," (Function, optional)"]}),"\n",(0,l.jsxs)(n.p,{children:["Function that is called when the maximum density of the displayed data changes. The units correspond to a density, such that a value of ",(0,l.jsx)(n.code,{children:"1"})," is a weight of ",(0,l.jsx)(n.code,{children:"1"})," across the entire world, in Mercator projection space. To obtain the density the layer invokes the ",(0,l.jsx)(n.code,{children:"getWeight"})," accessor on all visible quadbin cells, normalizing by the cell area (",(0,l.jsx)(n.code,{children:"0.25 ** cellZ"}),"). The value is then heurstically adjusted based on the viewport zoom to give smooth transitions when the data changes."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Default: ",(0,l.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,l.jsx)(n.h5,{id:"example",children:"Example"}),"\n",(0,l.jsxs)(n.p,{children:["A quadbin cell at zoom level ",(0,l.jsx)(n.code,{children:"2"})," with a ",(0,l.jsx)(n.code,{children:"weight"})," of ",(0,l.jsx)(n.code,{children:"1000"})," gives a density of ",(0,l.jsx)(n.code,{children:"16000"})," (",(0,l.jsx)(n.code,{children:"1000 / (0.25 ** 2)"}),"). Upon zooming in, there are different ways the data can be distributed, with the extremes are given here:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["At zoom level ",(0,l.jsx)(n.code,{children:"3"})," the cell splits equally into four cells with weight ",(0,l.jsx)(n.code,{children:"250"}),". The density stays at ",(0,l.jsx)(n.code,{children:"16000"})," (",(0,l.jsx)(n.code,{children:"250 / (0.25 ** 3)"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:["The cell splits into three empty cells and one with weight ",(0,l.jsx)(n.code,{children:"1000"}),". The density increases to ",(0,l.jsx)(n.code,{children:"64000"})," (",(0,l.jsx)(n.code,{children:"1000 / (0.25 ** 3)"}),")."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var a=i(96540);const l={},s=a.createContext(l);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);