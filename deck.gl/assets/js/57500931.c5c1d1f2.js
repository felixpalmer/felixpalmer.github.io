"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5783],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(k,o(o({ref:t},c),{},{components:a})):n.createElement(k,o({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},82340:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(83117),r=(a(67294),a(3905));const i={},o="MapboxOverlay",l={unversionedId:"api-reference/mapbox/mapbox-overlay",id:"api-reference/mapbox/mapbox-overlay",title:"MapboxOverlay",description:"MapboxOverlay is an implementation of Mapbox GL JS's IControl API. When adding a MapboxOverlay control to an mapbox map, deck.gl layers are rendered in synchronization with the base map layers. This control supports both overlaid and interleaved rendering modes.",source:"@site/../docs/api-reference/mapbox/mapbox-overlay.md",sourceDirName:"api-reference/mapbox",slug:"/api-reference/mapbox/mapbox-overlay",permalink:"/deck.gl/docs/api-reference/mapbox/mapbox-overlay",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/mapbox/mapbox-overlay.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MapboxLayer",permalink:"/deck.gl/docs/api-reference/mapbox/mapbox-layer"},next:{title:"DeckGL (React Component)",permalink:"/deck.gl/docs/api-reference/react/deckgl"}},p={},s=[{value:"Example",id:"example",level:2},{value:"Overlaid",id:"overlaid",level:3},{value:"Interleaved",id:"interleaved",level:3},{value:"Using with react-map-gl",id:"using-with-react-map-gl",level:3},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"setProps",id:"setprops",level:5},{value:"pickObject",id:"pickobject",level:5},{value:"pickObjects",id:"pickobjects",level:5},{value:"pickMultipleObjects",id:"pickmultipleobjects",level:5},{value:"finalize",id:"finalize",level:5},{value:"getCanvas",id:"getcanvas",level:5},{value:"Remarks",id:"remarks",level:2},{value:"Multi-view usage",id:"multi-view-usage",level:3}],c={toc:s},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mapboxoverlay"},"MapboxOverlay"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MapboxOverlay")," is an implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/mapbox-gl"},"Mapbox GL JS"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://docs.mapbox.com/mapbox-gl-js/api/markers/#icontrol"},"IControl")," API. When adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"MapboxOverlay")," control to an mapbox map, deck.gl layers are rendered in synchronization with the base map layers. This control supports both ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/get-started/using-with-map"},"overlaid and interleaved")," rendering modes."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("h3",{id:"overlaid"},"Overlaid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxOverlay} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({\n  center: [-74.5, 40],\n  zoom: 14,\n  antialias: true // Improves the rendering quality\n});\n\nconst overlay = new MapboxOverlay({\n  interleaved: false,\n  layers: [\n    new ScatterplotLayer({\n      id: 'my-scatterplot',\n      data: [\n        {position: [-74.5, 40], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0]\n    })\n  ]\n});\n\nmap.addControl(overlay);\n")),(0,r.kt)("h3",{id:"interleaved"},"Interleaved"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxOverlay} from '@deck.gl/mapbox';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({\n  center: [-74.5, 40],\n  zoom: 14,\n  antialias: true // Improves the rendering quality\n});\n\nconst overlay = new MapboxOverlay({\n  interleaved: true,\n  layers: [\n    new ScatterplotLayer({\n      id: 'my-scatterplot',\n      data: [\n        {position: [-74.5, 40], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0],\n\n      beforeId: 'admin_labels' // Insert before this Mapbox layer\n    })\n  ]\n});\n\nmap.addControl(overlay);\n")),(0,r.kt)("h3",{id:"using-with-react-map-gl"},"Using with ",(0,r.kt)("a",{parentName:"h3",href:"https://visgl.github.io/react-map-gl"},"react-map-gl")),(0,r.kt)("p",null,"The following code demonstrates how to create a React component from ",(0,r.kt)("inlineCode",{parentName:"p"},"MapboxOverlay")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"react-map-gl@7.x")," and Typescript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {ScatterplotLayer} from '@deck.gl/layers';\nimport {MapboxOverlay, MapboxOverlayProps} from '@deck.gl/mapbox';\nimport {useControl} from 'react-map-gl';\n\nimport Map, {NavigationControl} from 'react-map-gl';\n\nfunction DeckGLOverlay(props: MapboxOverlayProps & {\n  interleaved?: boolean;\n}) {\n  const overlay = useControl<MapboxOverlay>(() => new MapboxOverlay(props));\n  overlay.setProps(props);\n  return null;\n}\n\nexport default function App() {\n  const scatterplotLayer = new ScatterplotLayer({\n    id: 'my-scatterplot',\n    data: [\n      {position: [-74.5, 40], size: 100}\n    ],\n    getPosition: d => d.position,\n    getRadius: d => d.size,\n    getFillColor: [255, 0, 0]\n  });\n\n  return (\n    <Map\n      initialViewState={{\n        latitude: 40,\n        longitude: -74.5,\n        zoom: 12\n      }}\n      mapStyle=\"mapbox://styles/mapbox/light-v9\"\n      mapboxAccessToken=\"\"\n    >\n      <DeckGLOverlay layers={[scatterplotLayer]} />\n      <NavigationControl />\n    </Map>\n  );\n}\n")),(0,r.kt)("p",null,"See react-map-gl's ",(0,r.kt)("a",{parentName:"p",href:"https://visgl.github.io/react-map-gl/docs/api-reference/use-control"},"useControl")," hook.\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://deck.gl/docs/get-started/using-with-typescript"},"using deck.gl with Typescript"),"."),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxOverlay} from '@deck.gl/mapbox';\nnew MapboxOverlay(props);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MapboxOverlay")," accepts the same props as the ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"Deck")," class, with the following exceptions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"views")," - multi-view support is limited. There is only one ",(0,r.kt)("inlineCode",{parentName:"li"},"MapView")," that can synchronize with the base map. See the ",(0,r.kt)("a",{parentName:"li",href:"#multi-view-usage"},"using with multi-views")," section for details."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"canvas")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"gl")," - context creation is managed internally."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"viewState")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"initialViewState")," - camera state is managed internally."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"controller")," - always disabled (to use Mapbox's interaction handlers).")),(0,r.kt)("p",null,"The constructor additionally accepts the following option:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"interleaved")," (Boolean) - If ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", a dedicated deck.gl canvas is added on top of the base map. If ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", deck.gl layers are inserted into mapbox-gl's layer stack, and share the same WebGLRenderingContext as the base map. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"interleaved: true"),", you may optionally add a ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeId")," prop to a layer to specify its position in the Mapbox layer stack. If multiple deck.gl layers have the same ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeId"),", they are rendered in the order that is passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"layers")," array."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h5",{id:"setprops"},"setProps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const overlay = new MapboxOverlay({\n  interleaved: true,\n  layers: []\n});\n\nmap.addControl(overlay);\n\n// Update layers\noverlay.setProps({\n  layers: [new ScatterplotLayer({...})]\n})\n")),(0,r.kt)("p",null,"Updates (partial) props of the underlying ",(0,r.kt)("inlineCode",{parentName:"p"},"Deck")," instance. See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#setprops"},"Deck.setProps"),"."),(0,r.kt)("h5",{id:"pickobject"},"pickObject"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#pickobject"},"Deck.pickObject"),"."),(0,r.kt)("h5",{id:"pickobjects"},"pickObjects"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#pickobjects"},"Deck.pickObjects"),"."),(0,r.kt)("h5",{id:"pickmultipleobjects"},"pickMultipleObjects"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#pickmultipleobjects"},"Deck.pickMultipleObjects"),"."),(0,r.kt)("h5",{id:"finalize"},"finalize"),(0,r.kt)("p",null,"Removes the control and deletes all resources."),(0,r.kt)("h5",{id:"getcanvas"},"getCanvas"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#getcanvas"},"Deck.getCanvas"),". When using ",(0,r.kt)("inlineCode",{parentName:"p"},"interleaved: true"),", returns the base map's ",(0,r.kt)("inlineCode",{parentName:"p"},"canvas"),"."),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("h3",{id:"multi-view-usage"},"Multi-view usage"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"MapboxOverlay")," with multiple views passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"views")," prop, only one of the views can match the base map and receive interaction."),(0,r.kt)("p",null,"With that said, it is still possible to take advantage of deck's multi-view system and render a mapbox base map onto any one MapView of your choice by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"views")," array and a ",(0,r.kt)("inlineCode",{parentName:"p"},"layerFilter")," callback."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To use multiple views, define a ",(0,r.kt)("inlineCode",{parentName:"li"},"MapView")," with the id ",(0,r.kt)("inlineCode",{parentName:"li"},"\u201cmapbox\u201d"),". This view will receive the state that matches the base map at each render."),(0,r.kt)("li",{parentName:"ul"},"If views are provided but the array does not contain this id, then a ",(0,r.kt)("inlineCode",{parentName:"li"},"MapView({id: 'mapbox'})")," will be inserted at the bottom of the stack.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MapboxOverlay} from '@deck.gl/mapbox';\nimport {Deck, MapView, OrthographicView} from '@deck.gl/core';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nconst map = new mapboxgl.Map({...});\n\nconst overlay = new MapboxOverlay({\n  views: [\n    // This view will be synchronized with the base map\n    new MapView({id: 'mapbox'}),\n    // This view will not be interactive\n    new OrthographicView({id: 'widget'})\n  ],\n  layerFilter: ({layer, viewport}) => {\n    const shouldDrawInWidget = layer.id.startsWith('widget');\n    if (viewport.id === 'widget') return shouldDrawInWidget;\n    return !shouldDrawInWidget;\n  },\n  layers: [\n    new ScatterplotLayer({\n      id: 'my-scatterplot',\n      data: [\n        {position: [-74.5, 40], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0]\n    }),\n    new ScatterplotLayer({\n      id: 'widget-scatterplot',\n      data: [\n        {position: [0, 0], size: 100}\n      ],\n      getPosition: d => d.position,\n      getRadius: d => d.size,\n      getFillColor: [255, 0, 0]\n    })\n  ]\n});\n\nmap.addControl(overlay);\n")))}m.isMDXComponent=!0}}]);