"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[4212],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>k});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return r?o.createElement(k,a(a({ref:t},s),{},{components:r})):o.createElement(k,a({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,a[1]=i;for(var p=2;p<l;p++)a[p]=r[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2101:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=r(87462),n=(r(67294),r(3905));const l={},a="Styles",i={unversionedId:"api-reference/carto/styles",id:"api-reference/carto/styles",title:"Styles",description:"Helper functions to create data-driven map visualizations.",source:"@site/../docs/api-reference/carto/styles.md",sourceDirName:"api-reference/carto",slug:"/api-reference/carto/styles",permalink:"/deck.gl/docs/api-reference/carto/styles",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/styles.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VectorTileLayer",permalink:"/deck.gl/docs/api-reference/carto/vector-tile-layer"},next:{title:"@deck.gl/google-maps",permalink:"/deck.gl/docs/api-reference/google-maps/overview"}},c={},p=[{value:"colorBins",id:"colorbins",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>attr</code> (String)",id:"attr",level:4},{value:"<code>domain</code> (Array)",id:"domain",level:4},{value:"<code>colors</code> (String | Array, optional)",id:"colors",level:4},{value:"<code>nullColor</code> (Array, optional)",id:"nullcolor",level:4},{value:"colorCategories",id:"colorcategories",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"<code>attr</code> (String)",id:"attr",level:4},{value:"<code>domain</code> (Array)",id:"domain",level:4},{value:"<code>colors</code> (String | Array, optional)",id:"colors",level:4},{value:"<code>nullColor</code> (Array, optional)",id:"nullcolor",level:4},{value:"<code>othersColor</code> (Array, optional)",id:"otherscolor",level:4},{value:"Color Continuous",id:"color-continuous",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"<code>attr</code> (String)",id:"attr",level:4},{value:"<code>domain</code> (Array)",id:"domain",level:4},{value:"<code>colors</code> (String | Array, optional)",id:"colors",level:4},{value:"<code>nullColor</code> (Array, optional)",id:"nullcolor",level:4}],s={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"styles"},"Styles"),(0,n.kt)("p",null,"Helper functions to create data-driven map visualizations."),(0,n.kt)("p",null,"These helpers take advantage of ",(0,n.kt)("a",{parentName:"p",href:"https://carto.com/carto-colors/"},"CARTOColors"),", custom color schemes built on top of well-known standards for color use on maps, with next generation enhancements for the web and CARTO basemaps."),(0,n.kt)("h2",{id:"colorbins"},"colorBins"),(0,n.kt)("p",null,"Helper function for quickly creating a color bins style based on ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-scale/blob/main/README.md#scaleThreshold"},"d3 scaleThreshold"),"."),(0,n.kt)("p",null,"Data values of each attribute are rounded down to the nearest value in the domain and are then styled with the corresponding color."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorBins({\n    attr: 'gn_pop',\n    domain: [1e5, 2e5, 3e5],\n    colors: 'Teal'\n  })\n});\n")),(0,n.kt)("p",null,"In this example, using ",(0,n.kt)("inlineCode",{parentName:"p"},"Teal")," of length ",(0,n.kt)("inlineCode",{parentName:"p"},"domain.length + 1"),", the range/color equivalence is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[, 1e5)     -> Teal[0]\n[1e5, 2e5)  -> Teal[1]\n[2e5, 3e5)  -> Teal[2]\n[3e5,]      -> Teal[3]\n")),(0,n.kt)("h3",{id:"arguments"},"Arguments"),(0,n.kt)("h4",{id:"attr"},(0,n.kt)("inlineCode",{parentName:"h4"},"attr")," (String)"),(0,n.kt)("p",null,"Attribute or column to symbolize by."),(0,n.kt)("h4",{id:"domain"},(0,n.kt)("inlineCode",{parentName:"h4"},"domain")," (Array)"),(0,n.kt)("p",null,"Assign manual class break values."),(0,n.kt)("h4",{id:"colors"},(0,n.kt)("inlineCode",{parentName:"h4"},"colors")," (String | Array, optional)"),(0,n.kt)("p",null,"Color assigned to each domain value."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String: A valid named ",(0,n.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,n.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,n.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,n.kt)("h4",{id:"nullcolor"},(0,n.kt)("inlineCode",{parentName:"h4"},"nullColor")," (Array, optional)"),(0,n.kt)("p",null,"Color for null values."),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")),(0,n.kt)("h2",{id:"colorcategories"},"colorCategories"),(0,n.kt)("p",null,"Helper function for quickly creating a color category style."),(0,n.kt)("p",null,"Data values of each attribute listed in the domain are mapped one to one with corresponding colors in the range."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, type FROM ne_10m_airports',\n  getFillColor: colorCategories({\n    attr: 'type',\n    domain: ['mid', 'major', 'military mid', 'mid and military', 'major and military'],\n    colors: 'Bold'\n  })\n});\n")),(0,n.kt)("h3",{id:"arguments-1"},"Arguments"),(0,n.kt)("h4",{id:"attr"},(0,n.kt)("inlineCode",{parentName:"h4"},"attr")," (String)"),(0,n.kt)("p",null,"Attribute or column to symbolize by."),(0,n.kt)("h4",{id:"domain"},(0,n.kt)("inlineCode",{parentName:"h4"},"domain")," (Array)"),(0,n.kt)("p",null,"Category list. Must be a valid list of categories."),(0,n.kt)("h4",{id:"colors"},(0,n.kt)("inlineCode",{parentName:"h4"},"colors")," (String | Array, optional)"),(0,n.kt)("p",null,"Color assigned to each domain value."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String: A valid named ",(0,n.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,n.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,n.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,n.kt)("h4",{id:"nullcolor"},(0,n.kt)("inlineCode",{parentName:"h4"},"nullColor")," (Array, optional)"),(0,n.kt)("p",null,"Color for null values."),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")),(0,n.kt)("h4",{id:"otherscolor"},(0,n.kt)("inlineCode",{parentName:"h4"},"othersColor")," (Array, optional)"),(0,n.kt)("p",null,"Fallback color for a category not correctly assigned."),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"[119, 119, 119]")),(0,n.kt)("h2",{id:"color-continuous"},"Color Continuous"),(0,n.kt)("p",null,"Helper function for quickly creating a color continuous style."),(0,n.kt)("p",null,"Data values of each field are interpolated linearly across values in the domain and are then styled with a blend of the corresponding color in the range."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"new CartoLayer({\n  type: MAP_TYPES.QUERY,\n  data: 'SELECT the_geom_webmercator, gn_pop FROM populated_places',\n  getFillColor: colorContinuous({\n    attr: 'gn_pop',\n    domain: [0, 1e5],\n    colors: 'BluYl'\n  })\n});\n")),(0,n.kt)("h3",{id:"arguments-2"},"Arguments"),(0,n.kt)("h4",{id:"attr"},(0,n.kt)("inlineCode",{parentName:"h4"},"attr")," (String)"),(0,n.kt)("p",null,"Attribute or column to symbolize by."),(0,n.kt)("h4",{id:"domain"},(0,n.kt)("inlineCode",{parentName:"h4"},"domain")," (Array)"),(0,n.kt)("p",null,"Attribute domain to define the data range."),(0,n.kt)("h4",{id:"colors"},(0,n.kt)("inlineCode",{parentName:"h4"},"colors")," (String | Array, optional)"),(0,n.kt)("p",null,"Color assigned to each domain value."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String: A valid named ",(0,n.kt)("a",{parentName:"li",href:"https://carto.com/carto-colors/"},"CARTOColors")," palette."),(0,n.kt)("li",{parentName:"ul"},"Array: Array of colors in RGBA ",(0,n.kt)("inlineCode",{parentName:"li"},"[ [r, g, b, [a]] ]"),". ")),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"PurpOr")),(0,n.kt)("h4",{id:"nullcolor"},(0,n.kt)("inlineCode",{parentName:"h4"},"nullColor")," (Array, optional)"),(0,n.kt)("p",null,"Color for null values."),(0,n.kt)("p",null,"Default: ",(0,n.kt)("inlineCode",{parentName:"p"},"[204, 204, 204]")))}d.isMDXComponent=!0}}]);