"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[9714],{56607:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference/carto/fetch-map","title":"fetchMap","description":"CARTO Builder is a powerful tool for designing map visualizations. With the fetchMap function, you can easily instantiate layers configured in Builder for use with deck.gl. It is available starting with CARTO Maps API version v3 and deck.gl 8.7.","source":"@site/../docs/api-reference/carto/fetch-map.md","sourceDirName":"api-reference/carto","slug":"/api-reference/carto/fetch-map","permalink":"/deck.gl/docs/api-reference/carto/fetch-map","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/fetch-map.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"BASEMAP","permalink":"/deck.gl/docs/api-reference/carto/basemap"},"next":{"title":"Data Sources","permalink":"/deck.gl/docs/api-reference/carto/data-sources"}}');var r=i(74848),t=i(28453);const a={},c="fetchMap",d={},o=[{value:"Usage",id:"usage",level:2},{value:"Static display of a CARTO map",id:"static-display-of-a-carto-map",level:3},{value:"Integration with CARTO basemaps",id:"integration-with-carto-basemaps",level:3},{value:"Parameters",id:"parameters",level:2},{value:"<code>cartoMapId</code> (string)",id:"cartomapid",level:4},{value:"<code>accessToken</code> (string, optional)",id:"accesstoken",level:4},{value:"<code>apiBaseUrl</code> (string, optional)",id:"apibaseurl",level:4},{value:"<code>headers</code> (object, optional)",id:"headers",level:4},{value:"<code>autoRefresh</code> (number, optional)",id:"autorefresh",level:4},{value:"<code>onNewData</code> (Function, Optional)",id:"onnewdata",level:4},{value:"Return value",id:"return-value",level:2},{value:"<code>id</code> (string)",id:"id",level:4},{value:"<code>title</code> (string)",id:"title",level:4},{value:"<code>description</code> (string)",id:"description",level:4},{value:"<code>createdAt</code> (string)",id:"createdat",level:4},{value:"<code>updatedAt</code> (string)",id:"updatedat",level:4},{value:"<code>initialViewState</code> (string)",id:"initialviewstate",level:4},{value:"<code>layers</code> (Layer[])",id:"layers",level:4},{value:"<code>basemap</code> (object)",id:"basemap",level:4},{value:"<code>stopAutoRefresh</code> (Function)",id:"stopautorefresh",level:4},{value:"Auto-refreshing",id:"auto-refreshing",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"fetchmap",children:"fetchMap"})}),"\n",(0,r.jsxs)(n.p,{children:["CARTO ",(0,r.jsx)(n.a,{href:"https://carto.com/builder/",children:"Builder"})," is a powerful tool for designing map visualizations. With the ",(0,r.jsx)(n.code,{children:"fetchMap"})," function, you can easily instantiate layers configured in Builder for use with deck.gl. It is available starting with CARTO Maps API version v3 and deck.gl 8.7."]}),"\n",(0,r.jsx)("div",{align:"center",children:(0,r.jsxs)("div",{children:[(0,r.jsx)("img",{src:"https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/docs/fetch-map.gif"}),(0,r.jsx)("p",{children:(0,r.jsx)("i",{children:"Loading a Builder map with deck.gl"})})]})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"static-display-of-a-carto-map",children:"Static display of a CARTO map"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import {Deck} from '@deck.gl/core';\nimport {fetchMap} from '@deck.gl/carto';\n\nconst cartoMapId = 'ff6ac53f-741a-49fb-b615-d040bc5a96b8';\nfetchMap({cartoMapId}).then(map => new Deck(map));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-carto-basemaps",children:"Integration with CARTO basemaps"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { fetchMap } from '@deck.gl/carto';\nimport { MapboxOverlay } from '@deck.gl/mapbox';\nimport maplibregl from 'maplibre-gl';\n\nfetchMap({ cartoMapId }).then(({ basemap, layers }) => {\n  const map = new maplibregl.Map({\n    container: '...',\n    ...basemap?.props, // basemap.props contain all props required to setup basemap\n    interactive: true\n  })\n  const overlay = new MapboxOverlay({layers: result.layers});\n  map.addControl(overlay);\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const map = await fetchMap({cartoMapId, credentials, autoRefresh, onNewData});\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"cartomapid",children:[(0,r.jsx)(n.code,{children:"cartoMapId"})," (string)"]}),"\n",(0,r.jsx)(n.p,{children:"Required. Identifier of map created in CARTO Builder."}),"\n",(0,r.jsxs)(n.h4,{id:"accesstoken",children:[(0,r.jsx)(n.code,{children:"accessToken"})," (string, optional)"]}),"\n",(0,r.jsx)(n.p,{children:"CARTO platform access token. Only required for private maps."}),"\n",(0,r.jsxs)(n.h4,{id:"apibaseurl",children:[(0,r.jsx)(n.code,{children:"apiBaseUrl"})," (string, optional)"]}),"\n",(0,r.jsx)(n.p,{children:"Base URL of the CARTO Maps API."}),"\n",(0,r.jsxs)(n.p,{children:["Example for account located in EU-west region: ",(0,r.jsx)(n.code,{children:"https://gcp-eu-west1.api.carto.com"})]}),"\n",(0,r.jsxs)(n.h4,{id:"headers",children:[(0,r.jsx)(n.code,{children:"headers"})," (object, optional)"]}),"\n",(0,r.jsx)(n.p,{children:"Custom HTTP headers to include in the map instantiation requests."}),"\n",(0,r.jsxs)(n.h4,{id:"autorefresh",children:[(0,r.jsx)(n.code,{children:"autoRefresh"})," (number, optional)"]}),"\n",(0,r.jsxs)(n.p,{children:["Interval in seconds at which to autoRefresh the data. If provided, ",(0,r.jsx)(n.code,{children:"onNewData"})," must also be provided."]}),"\n",(0,r.jsxs)(n.h4,{id:"onnewdata",children:[(0,r.jsx)(n.code,{children:"onNewData"})," (Function, Optional)"]}),"\n",(0,r.jsxs)(n.p,{children:["Callback function that will be invoked whenever data in layers is changed. If provided, ",(0,r.jsx)(n.code,{children:"autoRefresh"})," must also be provided."]}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return value"}),"\n",(0,r.jsxs)(n.p,{children:["When invoked with a given ",(0,r.jsx)(n.code,{children:"cartoMapId"}),", ",(0,r.jsx)(n.code,{children:"fetchMap"})," will retrieve the information about the map from CARTO, generate appropriate layers and populate them with data. The properties of the ",(0,r.jsx)(n.code,{children:"map"})," are as follows:"]}),"\n",(0,r.jsxs)(n.h4,{id:"id",children:[(0,r.jsx)(n.code,{children:"id"})," (string)"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"cartoMapId"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"title",children:[(0,r.jsx)(n.code,{children:"title"})," (string)"]}),"\n",(0,r.jsx)(n.p,{children:"The title given to the map in CARTO Builder."}),"\n",(0,r.jsxs)(n.h4,{id:"description",children:[(0,r.jsx)(n.code,{children:"description"})," (string)"]}),"\n",(0,r.jsx)(n.p,{children:"The description given to the map in CARTO Builder."}),"\n",(0,r.jsxs)(n.h4,{id:"createdat",children:[(0,r.jsx)(n.code,{children:"createdAt"})," (string)"]}),"\n",(0,r.jsx)(n.p,{children:"When the map was created."}),"\n",(0,r.jsxs)(n.h4,{id:"updatedat",children:[(0,r.jsx)(n.code,{children:"updatedAt"})," (string)"]}),"\n",(0,r.jsx)(n.p,{children:"When the map was last updated."}),"\n",(0,r.jsxs)(n.h4,{id:"initialviewstate",children:[(0,r.jsx)(n.code,{children:"initialViewState"})," (string)"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/deck.gl/docs/developer-guide/views#view-state",children:"view state"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"layers",children:[(0,r.jsx)(n.code,{children:"layers"})," (Layer[])"]}),"\n",(0,r.jsxs)(n.p,{children:["A collection of deck.gl ",(0,r.jsx)(n.a,{href:"/deck.gl/docs/api-reference/core/layer",children:"layers"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"basemap",children:[(0,r.jsx)(n.code,{children:"basemap"})," (object)"]}),"\n",(0,r.jsxs)(n.p,{children:["An object describing the ",(0,r.jsx)(n.a,{href:"/deck.gl/docs/api-reference/carto/basemap#supported-basemaps",children:"basemap"})," configured in CARTO Builder."]}),"\n",(0,r.jsx)(n.p,{children:"Properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," ",(0,r.jsx)(n.strong,{children:"(string)"})," - type of basemap: ",(0,r.jsx)(n.code,{children:"'maplibre'"})," or ",(0,r.jsx)(n.code,{children:"'google-maps'"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"props"})," ",(0,r.jsx)(n.strong,{children:"(string or object)"})," - props that should be passed to basemap implementation","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["if ",(0,r.jsx)(n.code,{children:"type"})," is ",(0,r.jsx)(n.code,{children:"'maplibre'"})," then it contains","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"style"})," ",(0,r.jsx)(n.strong,{children:"(string or object)"})," - URL of basemap style or style object if custom basemap is configured"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"center"})," ",(0,r.jsx)(n.strong,{children:"([number, number])"})," - center of map as ",(0,r.jsx)(n.code,{children:"[latitude, longitude]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"zoom"})," ",(0,r.jsx)(n.strong,{children:"(number)"})," - zoom level"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"pitch"})," ",(0,r.jsx)(n.strong,{children:"(number)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bearing"})," ",(0,r.jsx)(n.strong,{children:"(number)"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["if ",(0,r.jsx)(n.code,{children:"type"})," is ",(0,r.jsx)(n.code,{children:"'google-maps'"}),", then it contains those props","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mapTypeId"})," ",(0,r.jsx)(n.strong,{children:"(string)"})," - type id of map"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mapId"})," ",(0,r.jsx)(n.strong,{children:"(string, optional)"})," - map id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"center"})," ",(0,r.jsx)(n.strong,{children:"(object)"})," - center of map as ",(0,r.jsx)(n.code,{children:"{lat: number; lng: number}"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"zoom"}),": ",(0,r.jsx)(n.strong,{children:"(number)"})," - zoom level (note, it has +1 offset applied versus deck.gl zoom)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tilt"}),": ",(0,r.jsx)(n.strong,{children:"(number)"})," - tilt, same as ",(0,r.jsx)(n.code,{children:"pitch"})," in deck.gl API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"heading"}),": ",(0,r.jsx)(n.strong,{children:"(number)"})," - heading, same as ",(0,r.jsx)(n.code,{children:"bearing"})," in deck.gl API"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rawStyle"})," ",(0,r.jsx)(n.strong,{children:"(string or object)"})," - for ",(0,r.jsx)(n.code,{children:"maplibre"})," basemaps, original ",(0,r.jsx)(n.code,{children:"style"})," before applying layer filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"visibleLayerGroups"})," ",(0,r.jsx)(n.strong,{children:"(object, optional)"})," - layer groups to be displayed in the basemap."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"attribution"})," ",(0,r.jsx)(n.strong,{children:"(string, optional)"})," - custom attribution HTML for this basemap"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"stopautorefresh",children:[(0,r.jsx)(n.code,{children:"stopAutoRefresh"})," (Function)"]}),"\n",(0,r.jsxs)(n.p,{children:["A function to invoke to stop auto-refreshing. Only present if ",(0,r.jsx)(n.code,{children:"autoRefresh"})," option was provided to ",(0,r.jsx)(n.code,{children:"fetchMap"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"auto-refreshing",children:"Auto-refreshing"}),"\n",(0,r.jsxs)(n.p,{children:["With dynamic data sources, the ",(0,r.jsx)(n.code,{children:"autoRefresh"})," option to ",(0,r.jsx)(n.code,{children:"fetchMap"})," makes it simple to create an live-updating map."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const deck = new Deck({canvas: 'deck-canvas'});\nconst mapConfiguration = {\n  autoRefresh: 5,\n  cartoMapId,\n  onNewData: ({layers}) => {\n    deck.setProps({layers});\n  }\n};\n\nconst {initialViewState, layers, stopAutoRefresh} = await fetchMap(mapConfiguration);\ndeck.setProps({controller: true, initialViewState, layers});\n\nbuttonElement.addEventListener('click', () => {\n  stopAutoRefresh();\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);