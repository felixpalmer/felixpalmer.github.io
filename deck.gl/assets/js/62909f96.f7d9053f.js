"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2149],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4391:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const i={},o="Using deck.gl with React",l={unversionedId:"get-started/using-with-react",id:"get-started/using-with-react",title:"Using deck.gl with React",description:"While not directly based on React, deck.gl is designed from ground up to work with React based applications. deck.gl layers fit naturally into React's component render flow and flux/redux based applications. deck.gl layers will be performantly rerendered whenever you rerender your normal JSX or React components.",source:"@site/../docs/get-started/using-with-react.md",sourceDirName:"get-started",slug:"/get-started/using-with-react",permalink:"/deck.gl/docs/get-started/using-with-react",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/get-started/using-with-react.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Base Maps",permalink:"/deck.gl/docs/get-started/using-with-map"},next:{title:"Using deck.gl with TypeScript",permalink:"/deck.gl/docs/get-started/using-with-typescript"}},s={},c=[{value:"The DeckGL React Component",id:"the-deckgl-react-component",level:2},{value:"Adding a Base Map",id:"adding-a-base-map",level:2},{value:"Using JSX with deck.gl Layers",id:"using-jsx-with-deckgl-layers",level:2},{value:"Using JSX with deck.gl views",id:"using-jsx-with-deckgl-views",level:2},{value:"Using deck.gl with SSR",id:"using-deckgl-with-ssr",level:2},{value:"Remarks",id:"remarks",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-deckgl-with-react"},"Using deck.gl with React"),(0,r.kt)("p",null,"While not directly based on React, deck.gl is designed from ground up to work with ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/react/"},"React")," based applications. deck.gl layers fit naturally into React's component render flow and flux/redux based applications. deck.gl layers will be performantly rerendered whenever you rerender your normal JSX or React components."),(0,r.kt)("h2",{id:"the-deckgl-react-component"},"The DeckGL React Component"),(0,r.kt)("p",null,"To use deck.gl with React, simply import the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," React component and render it as a child of another component, passing in your list of deck.gl layers as a property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"/// app.js\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13,\n  pitch: 0,\n  bearing: 0\n};\n\n// Data to be used by the LineLayer\nconst data = [\n  {sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}\n];\n\n// DeckGL react component\nfunction App() {\n  const layers = [\n    new LineLayer({id: 'line-layer', data})\n  ];\n\n  return <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      layers={layers} />;\n}\n\n")),(0,r.kt)("h2",{id:"adding-a-base-map"},"Adding a Base Map"),(0,r.kt)("p",null,"An important companion to deck.gl is ",(0,r.kt)("inlineCode",{parentName:"p"},"react-map-gl"),". It is a React wrapper for ",(0,r.kt)("a",{parentName:"p",href:"https://mapbox.com"},"Mapbox")," that can share the same web mercator viewport settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"/// app.js\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport {Map} from 'react-map-gl';\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'your_mapbox_token';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13,\n  pitch: 0,\n  bearing: 0\n};\n\n// Data to be used by the LineLayer\nconst data = [\n  {sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}\n];\n\nfunction App({data}) {\n  const layers = [\n    new LineLayer({id: 'line-layer', data})\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      layers={layers}\n    >\n      <Map mapboxAccessToken={MAPBOX_ACCESS_TOKEN} />\n    </DeckGL>\n  );\n}\n\n")),(0,r.kt)("p",null,"For more detailed examples and options, see ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/base-maps/using-with-mapbox"},"using with Mapbox"),"."),(0,r.kt)("h2",{id:"using-jsx-with-deckgl-layers"},"Using JSX with deck.gl Layers"),(0,r.kt)("p",null,"It is possible to use JSX syntax to create deck.gl layers as React children of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," React components, instead of providing them as ES6 class instances to the ",(0,r.kt)("inlineCode",{parentName:"p"},"layers")," prop. There are no performance advantages to this syntax but it can allow for a more consistent, React-like coding style."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function App() {\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true} >\n      <LineLayer id="line-layer" data={data} />\n    </DeckGL>\n  );\n}\n')),(0,r.kt)("p",null,"For more information on this syntax and its limitations, see ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/react/deckgl"},"DeckGL API"),"."),(0,r.kt)("h2",{id:"using-jsx-with-deckgl-views"},"Using JSX with deck.gl views"),(0,r.kt)("p",null,"It is possible to use JSX syntax to create deck.gl views as React children of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," React components, instead of providing them as ES6 class instances to the ",(0,r.kt)("inlineCode",{parentName:"p"},"views")," prop."),(0,r.kt)("p",null,"The following code renders the same set of layers in two viewports, splitting the canvas into two columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import {MapView, FirstPersonView} from \'@deck.gl/core\';\n\nfunction App() {\n  const layers = [\n    new LineLayer({id: \'line-layer\', data})\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      layers={layers} >\n      <MapView id="map" width="50%" controller={true}>\n        <Map mapboxAccessToken={MAPBOX_ACCESS_TOKEN} />\n      </MapView>\n      <FirstPersonView width="50%" x="50%" fovy={50} />\n    </DeckGL>\n  );\n}\n')),(0,r.kt)("p",null,"For more information on this syntax, see ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/react/deckgl"},"DeckGL API"),"."),(0,r.kt)("h2",{id:"using-deckgl-with-ssr"},"Using deck.gl with SSR"),(0,r.kt)("p",null,"Frameworks such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Next.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Gatsby")," leverage Server Side Rendering to improve page loading performance. Some of deck.gl's upstream dependencies, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"d3"),", have opted to become ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/packages.html"},"ES modules")," and no longer support ",(0,r.kt)("inlineCode",{parentName:"p"},"require()")," from the default Node entry point. This will cause SSR to fail. Possible mitigations are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the framework provides such a config, you may be able to replace the offending commonjs entry point (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"@deck.gl/layers"),") with the corresponding ESM entry point (",(0,r.kt)("inlineCode",{parentName:"li"},"@deck.gl/layers/dist/esm"),")."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, isolate the deck.gl imports and exclude them from SSR. Since deck.gl renders into a WebGL2/WebGPU context, it wouldn't benefit from SSR to begin with. Below is a minimal sample for ",(0,r.kt)("inlineCode",{parentName:"li"},"Next.js"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/components/map.js"',title:'"/src/components/map.js"'},"import DeckGL, {TextLayer} from 'deck.gl';\n\nexport default function Map() {\n  return <DeckGL ... />\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/src/pages/app.js"',title:'"/src/pages/app.js"'},"import dynamic from 'next/dynamic';\nconst Map = dynamic(() => import('../components/map'), {ssr: false});\n\nexport default function App() {\n  return <Map />;\n}\n")),(0,r.kt)("p",null,"More examples are discussed in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/issues/7735"},"this issue"),"."),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," component is typically rendered as a child of a\nmap component like ",(0,r.kt)("a",{parentName:"p",href:"https://visgl.github.io/react-map-gl"},"react-map-gl"),",\nbut could be rendered as a child of any React component that you want to\noverlay your layers on top of.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To achieve the overlay effect, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," component creates a transparent\n",(0,r.kt)("inlineCode",{parentName:"p"},"canvas")," DOM element, into which the deck.gl layers passed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"layers"),"\nprop will render (using WebGL2/WebGPU). Since this canvas is transparent, any\nother component you have underneath (typically a map) will visible behind\nthe layers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the deck.gl layer list is drawn to screen, it matches the new Layer\ninstances with the instances from the previous render call, intelligently\ncompares the new properties and only updates GPU resources when needed\n(just like React does for DOM components).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Internally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," component initializes a WebGL2/WebGPU context\nattached to a canvas element, sets up the animation loop and calls provided\ncallbacks on initial load and for each rendered frame. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL"),"\ncomponent also handles events propagation across layers, and prevents\nunnecessary calculations using React and deck.gl lifecycle functions."))),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/react/deckgl"},"full API doc")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"DeckGL")," component."))}m.isMDXComponent=!0}}]);