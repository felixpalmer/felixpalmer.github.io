"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5324],{3905:(e,r,t)=>{t.d(r,{Zo:()=>i,kt:()=>g});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=a.createContext({}),c=function(e){var r=a.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},i=function(e){var r=c(e.components);return a.createElement(u.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=n,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(g,s(s({ref:r},i),{},{components:t})):a.createElement(g,s({ref:r},i))}));function g(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l[p]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89979:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(83117),n=(t(67294),t(3905));const o={},s="Data Sources",l={unversionedId:"api-reference/carto/data-sources",id:"api-reference/carto/data-sources",title:"Data Sources",description:"To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers fetch function, except that rather than passing a URL, options that specify the data in the CARTO are used.",source:"@site/../docs/api-reference/carto/data-sources.md",sourceDirName:"api-reference/carto",slug:"/api-reference/carto/data-sources",permalink:"/deck.gl/docs/api-reference/carto/data-sources",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/data-sources.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"fetchMap",permalink:"/deck.gl/docs/api-reference/carto/fetch-map"},next:{title:"H3TileLayer",permalink:"/deck.gl/docs/api-reference/carto/h3-tile-layer"}},u={},c=[{value:"Overview",id:"overview",level:3},{value:"Promise API",id:"promise-api",level:3},{value:"Types",id:"types",level:3},{value:"Caching",id:"caching",level:3},{value:"Available Data Sources",id:"available-data-sources",level:3},{value:"vectorTableSource",id:"vectortablesource",level:4},{value:"vectorQuerySource",id:"vectorquerysource",level:4},{value:"vectorTilesetSource",id:"vectortilesetsource",level:4},{value:"h3TableSource",id:"h3tablesource",level:4},{value:"h3QuerySource",id:"h3querysource",level:4},{value:"h3TilesetSource",id:"h3tilesetsource",level:4},{value:"quadbinTableSource",id:"quadbintablesource",level:4},{value:"quadbinQuerySource",id:"quadbinquerysource",level:4},{value:"quadbinTilesetSource",id:"quadbintilesetsource",level:4},{value:"rasterTilesetSource (Experimental)",id:"rastertilesetsource-experimental",level:4},{value:"boundaryTableSource (Experimental)",id:"boundarytablesource-experimental",level:4},{value:"boundaryQuerySource (Experimental)",id:"boundaryquerysource-experimental",level:4},{value:"QueryParameters",id:"queryparameters",level:3}],i={toc:c},p="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,a.Z)({},i,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"data-sources"},"Data Sources"),(0,n.kt)("p",null,"To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers ",(0,n.kt)("inlineCode",{parentName:"p"},"fetch")," function, except that rather than passing a URL, options that specify the data in the CARTO are used."),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)("p",null,"The data source functions are a compact way to describe the data that you want to fetch. For example, to fetch a table from a data warehouse from the connection ",(0,n.kt)("inlineCode",{parentName:"p"},"carto_dw"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {vectorTableSource} from '@deck.gl/carto';\nconst data = vectorTableSource({\n  accessToken: 'XXX',\n  connectionName: 'carto_dw',\n  tableName: 'carto-demo-data.demo_tables.chicago_crime_sample',\n})\n")),(0,n.kt)("h3",{id:"promise-api"},"Promise API"),(0,n.kt)("p",null,"All data source functions return a Promise, which can be resolved to obtain the actual Tilejson. However, as the ",(0,n.kt)("a",{parentName:"p",href:"../core/layer#data"},"core deck.gl Layer prop supports Promises"),", it is often not necessary to resolve or await the Promise and the data source can be directly passed to the data prop:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import {H3TileLayer, h3TilesetSource} from '@deck.gl/carto';\nnew H3TileLayer({\n  data: h3TilesetSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.h3_data'\n  }),\n\n  getFillColor: d => d.properties.color\n});\n")),(0,n.kt)("h3",{id:"types"},"Types"),(0,n.kt)("p",null,"All the data source functions are fully typed, to aid in providing the correct parameters and working correctly with the return value."),(0,n.kt)("h3",{id:"caching"},"Caching"),(0,n.kt)("p",null,"The dataSource functions have an internal cache, which avoids fetching data from the server if the parameters have not changed. Thus they can be used, for example, in React ",(0,n.kt)("inlineCode",{parentName:"p"},"render()")," functions without needing memoization."),(0,n.kt)("h3",{id:"available-data-sources"},"Available Data Sources"),(0,n.kt)("p",null,"All data source functions take the following global options:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type SourceOptions = {\n  accessToken: string;\n  connectionName: string;\n  apiBaseUrl?: string;\n  clientId?: string;\n  headers?: Record<string, string>;\n  mapsUrl?: string;\n};\n")),(0,n.kt)("p",null,"In addition, the following options are supported on each source:"),(0,n.kt)("h4",{id:"vectortablesource"},"vectorTableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type VectorTableSourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"vectorquerysource"},"vectorQuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type VectorQuerySourceOptions = {\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"vectortilesetsource"},"vectorTilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type VectorTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"h3tablesource"},"h3TableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3TableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"h3querysource"},"h3QuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3QuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"h3tilesetsource"},"h3TilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3TilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"quadbintablesource"},"quadbinTableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type QuadbinTableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"quadbinquerysource"},"quadbinQuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type QuadbinQuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"quadbintilesetsource"},"quadbinTilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type QuadbinTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"rastertilesetsource-experimental"},"rasterTilesetSource (Experimental)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type RasterTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"boundarytablesource-experimental"},"boundaryTableSource (Experimental)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type BoundaryTableSourceOptions = {\n  tilesetTableName: string;\n  columns?: string[];\n  matchingColumn?: string;\n  propertiesTableName: string;\n}\n")),(0,n.kt)("h4",{id:"boundaryquerysource-experimental"},"boundaryQuerySource (Experimental)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type BoundaryQuerySourceOptions = {\n  tilesetTableName: string;\n  matchingColumn?: string;\n  propertiesSqlQuery: string;\n  queryParameters?: QueryParameters;\n}\n")),(0,n.kt)("h3",{id:"queryparameters"},"QueryParameters"),(0,n.kt)("p",null,"QueryParameters are used to parametrize SQL queries. The format depends on the source's provider, some examples:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://node-postgres.com/features/queries"},"PostgreSQL and Redshift"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js"},"BigQuery positional"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js"},"BigQuery named parameters"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=@username`,\n  queryParameters: { username: 'my-name' }\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.snowflake.com/en/user-guide/nodejs-driver-use.html#binding-statement-parameters"},"Snowflake positional")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n")),(0,n.kt)("p",null,"or"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  data: `select * from users where username=:1`,\n  queryParameters: ['my-name']\n});\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/markdirish/node-odbc#bindparameters-callback"},"Databricks ODBC")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...\n  data: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n")))}m.isMDXComponent=!0}}]);