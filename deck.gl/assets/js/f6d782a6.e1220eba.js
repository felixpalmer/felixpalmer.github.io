"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8636],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},86169:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const o={},a="FirstPersonView",l={unversionedId:"api-reference/core/first-person-view",id:"api-reference/core/first-person-view",title:"FirstPersonView",description:"The FirstPersonView class is a subclass of View that describes a camera placed at a provided location, looking towards the direction and orientation specified by viewState. The behavior is similar to that of a first-person game).",source:"@site/../docs/api-reference/core/first-person-view.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/first-person-view",permalink:"/deck.gl/docs/api-reference/core/first-person-view",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/first-person-view.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GlobeView (Experimental)",permalink:"/deck.gl/docs/api-reference/core/globe-view"},next:{title:"OrthographicView",permalink:"/deck.gl/docs/api-reference/core/orthographic-view"}},p={},s=[{value:"Constructor",id:"constructor",level:2},{value:"<code>projectionMatrix</code> (Array16, optional)",id:"projectionmatrix",level:5},{value:"<code>fovy</code> (Number, optional)",id:"fovy",level:5},{value:"<code>near</code> (Number, optional)",id:"near",level:5},{value:"<code>far</code> (Number, optional)",id:"far",level:5},{value:"<code>focalDistance</code> (Number, optional)",id:"focaldistance",level:5},{value:"View State",id:"view-state",level:2},{value:"Controller",id:"controller",level:2},{value:"Source",id:"source",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"firstpersonview"},"FirstPersonView"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstPersonView")," class is a subclass of ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/viewport"},"View")," that describes a camera placed at a provided location, looking ",(0,i.kt)("strong",{parentName:"p"},"towards")," the direction and orientation specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"viewState"),". The behavior is similar to that of a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/First-person_(gaming)"},"first-person game"),"."),(0,i.kt)("p",null,"It's recommended that you read the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/views"},"Views and Projections guide")," before using this class."),(0,i.kt)("div",{style:{position:"relative",height:450}}),(0,i.kt)("div",{style:{position:"absolute",transform:"translateY(-450px)",paddingLeft:"inherit",paddingRight:"inherit",left:0,right:0}},(0,i.kt)("iframe",{height:"450",style:{width:"100%"},scrolling:"no",title:"deck.gl FirstPersonView",src:"https://codepen.io/vis-gl/embed/oNYXxNE?height=450&theme-id=light&default-tab=result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},"See the Pen ",(0,i.kt)("a",{href:"https://codepen.io/vis-gl/pen/oNYXxNE"},"deck.gl FirstPersonView")," by vis.gl (",(0,i.kt)("a",{href:"https://codepen.io/vis-gl"},"@vis-gl"),") on ",(0,i.kt)("a",{href:"https://codepen.io"},"CodePen"),".")),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {FirstPersonView} from '@deck.gl/core';\nnew FirstPersonView({id, ...});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"FirstPersonView")," takes the same parameters as the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/view"},"View")," superclass constructor, plus the following:"),(0,i.kt)("h5",{id:"projectionmatrix"},(0,i.kt)("inlineCode",{parentName:"h5"},"projectionMatrix")," (Array","[16]",", optional)"),(0,i.kt)("p",null,"Projection matrix."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"projectionMatrix")," is not supplied, the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," class will build a projection matrix from the following parameters:"),(0,i.kt)("h5",{id:"fovy"},(0,i.kt)("inlineCode",{parentName:"h5"},"fovy")," (Number, optional)"),(0,i.kt)("p",null,"Field of view covered by camera, in the perspective case. In degrees. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"75"),"."),(0,i.kt)("h5",{id:"near"},(0,i.kt)("inlineCode",{parentName:"h5"},"near")," (Number, optional)"),(0,i.kt)("p",null,"Distance of near clipping plane. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"0.1"),"."),(0,i.kt)("h5",{id:"far"},(0,i.kt)("inlineCode",{parentName:"h5"},"far")," (Number, optional)"),(0,i.kt)("p",null,"Distance of far clipping plane. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,i.kt)("h5",{id:"focaldistance"},(0,i.kt)("inlineCode",{parentName:"h5"},"focalDistance")," (Number, optional)"),(0,i.kt)("p",null,"Modifier of viewport scale. Corresponds to the number of pixels per meter. Default ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,i.kt)("h2",{id:"view-state"},"View State"),(0,i.kt)("p",null,"To render, a ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstPersonView")," needs to be combined with a ",(0,i.kt)("inlineCode",{parentName:"p"},"viewState")," object with the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"longitude")," (Number, optional) - longitude of the camera"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"latitude")," (Number, optional) - latitude of the camera")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"position")," (Number","[3]",", optional) - meter offsets of the camera from the lng-lat anchor point. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"[0, 0, 0]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bearing")," (Number, optional) - bearing angle in degrees. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (north)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pitch")," (Number, optional) - pitch angle in degrees. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (horizontal).")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxPitch")," (Number, optional) - max pitch angle. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"90")," (down)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minPitch")," (Number, optional) - min pitch angle. Default ",(0,i.kt)("inlineCode",{parentName:"li"},"-90")," (up).")),(0,i.kt)("h2",{id:"controller"},"Controller"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstPersonView")," uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstPersonController")," to handle interactivity. To enable the controller, use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const view = new FirstPersonView({id: 'pov', controller: true});\n")),(0,i.kt)("p",null,"Visit the ",(0,i.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/first-person-controller"},"FirstPersonController")," documentation for a full list of supported options."),(0,i.kt)("h2",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/views/first-person-view.ts"},"modules/core/src/views/first-person-view.ts")))}u.isMDXComponent=!0}}]);