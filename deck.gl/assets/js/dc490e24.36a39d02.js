"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[297],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},65415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(83117),r=(t(67294),t(3905));const o={},l="Conversion Reference",i={unversionedId:"api-reference/json/conversion-reference",id:"api-reference/json/conversion-reference",title:"Conversion Reference",description:"| Prefix | Description | Example usage |",source:"@site/../docs/api-reference/json/conversion-reference.md",sourceDirName:"api-reference/json",slug:"/api-reference/json/conversion-reference",permalink:"/deck.gl/docs/api-reference/json/conversion-reference",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/json/conversion-reference.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JSONConfiguration",permalink:"/deck.gl/docs/api-reference/json/json-configuration"},next:{title:"@deck.gl/mapbox",permalink:"/deck.gl/docs/api-reference/mapbox/overview"}},s={},p=[{value:"Classes and using <code>@@type</code>",id:"classes-and-using-type",level:2},{value:"React components and using <code>@@type</code> (experimental)",id:"react-components-and-using-type-experimental",level:2},{value:"Functions and using <code>@@function</code>",id:"functions-and-using-function",level:2},{value:"Constants and using the <code>@@#</code> prefix",id:"constants-and-using-the--prefix",level:3},{value:"Enumerations and using the <code>@@#</code> prefix",id:"enumerations-and-using-the--prefix",level:3},{value:"Functions and using the <code>@@=</code> prefix",id:"functions-and-using-the--prefix",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conversion-reference"},"Conversion Reference"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prefix"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Example usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@@type")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpret a string as a JavaScript class or React component, resolving in the JSONConfiguration."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"@@type": "ScatterplotLayer"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@@function")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpret a string as a JavaScript function, resolving in the JSONConfiguration."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"@@function": "calculateRadius"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@@=")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpret the rest of the string as a function, parsing unquoted character strings as identifiers"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"@@=[lng, lat]"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@@#")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpret the rest of the string as a constant, resolving in the JSON configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"@@#MapController"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"@@#<enum-name>.<enum-value>")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpret the rest of the string as a enumeration, resolving in the JSON configuration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"@@#GL.ONE"'))))),(0,r.kt)("p",null,'The @deck.g/json framework inspects the "raw" parsed JSON data structure before supplying it to deck.gl as props. This conversion process replaces certain objects in the structure with instances of objects.'),(0,r.kt)("h2",{id:"classes-and-using-type"},"Classes and using ",(0,r.kt)("inlineCode",{parentName:"h2"},"@@type")),(0,r.kt)("p",null,"Conversion happens by default for classes. For example, when this configuration of classes is passed to a\n",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter"),"\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const configuration = {\n  classes: Object.assign({}, require('@deck.gl/layers'), require('@deck.gl/aggregation-layers'))\n};\n")),(0,r.kt)("p",null,"and used to resolve this JSON object\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "layers": [\n    {\n      "@@type": "ScatterplotLayer",\n      "data": ...,\n      "getColor": [0, 128, 255],\n      "getRadius": 1\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"it will replace the layers descriptor with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      getColor: [0, 128, 255],\n      getRadius: 1\n    })\n  ]\n}\n")),(0,r.kt)("p",null,"A warning will be raised if the named layer is not registered."),(0,r.kt)("p",null,"Whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter")," component finds the ",(0,r.kt)("inlineCode",{parentName:"p"},"@@type"),' field, it looks into the "class catalog"\nlike that in the configuration object above. These classes can be layers, views, or other objects,\nprovided the classes have been registered.'),(0,r.kt)("h2",{id:"react-components-and-using-type-experimental"},"React components and using ",(0,r.kt)("inlineCode",{parentName:"h2"},"@@type")," (experimental)"),(0,r.kt)("p",null,"Conversion happens by default for react components. For example, when this configuration of classes is passed to a\n",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter"),"\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nimport TestComponent from '@/components/test';\n\nconst configuration = {\n  React,\n  reactComponents: {\n    TestComponent\n  }\n};\n")),(0,r.kt)("p",null,"and used to resolve this JSON object\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@@type": "TestComponent",\n  // props for the component\n  "color": [0, 128, 255],\n  "anotherProp": 1\n}\n')),(0,r.kt)("p",null,"it will replace it with a React component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  $$typeof: Symbol(react.element),\n  key: null,\n  props: {\n    color: [0, 128, 255],\n    anotherProp: 1\n  },\n  // ...\n}\n")),(0,r.kt)("p",null,"You can use it directly to render a react component."),(0,r.kt)("p",null,"A warning will be raised if the named react component is not registered."),(0,r.kt)("h2",{id:"functions-and-using-function"},"Functions and using ",(0,r.kt)("inlineCode",{parentName:"h2"},"@@function")),(0,r.kt)("p",null,"Any JavaScript function can be passed. For example, when this configuration of functions is passed to a\n",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter"),"\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function calculateRadius({base, exponent}) {\n  return Math.pow(base, exponent);\n}\n\nconst configuration = {\n  ...,\n  functions: {calculateRadius}\n};\n")),(0,r.kt)("p",null,"and used to resolve this JSON object\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "layers": [\n    {\n      "@@type": "ScatterplotLayer",\n      "data": ...,\n      "getColor": [0, 128, 255],\n      "getRadius": {\n        "@@function": "calculateRadius",\n        "base": 2,\n        "exponent": 3\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"it will replace the layers descriptor with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      getColor: [0, 128, 255],\n      getRadius: 8\n    })\n  ]\n}\n")),(0,r.kt)("p",null,"A warning will be raised if the function is not registered."),(0,r.kt)("p",null,"Whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter")," component finds the ",(0,r.kt)("inlineCode",{parentName:"p"},"@@function"),' field, it looks into the "function catalog"\nlike that in the configuration object above.'),(0,r.kt)("h3",{id:"constants-and-using-the--prefix"},"Constants and using the ",(0,r.kt)("inlineCode",{parentName:"h3"},"@@#")," prefix"),(0,r.kt)("p",null,"A map of constants that should be made available to the JSON string resolver. This is also helpful to evaluate a prop that does not need to be instantiated. The ",(0,r.kt)("inlineCode",{parentName:"p"},"@@#")," prefix on an constant triggers this lookup."),(0,r.kt)("p",null,"For example, when this configuration is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {MapController} from '@deck.gl/core';\n\nconst configuration = {\n  ...\n  constants: {\n    MapController\n  }\n};\n")),(0,r.kt)("p",null,"and used to resolve in this JSON object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "controller": "@@#MapController",\n  "layers": [\n    {\n      "@@type": "ScatterplotLayer",\n      "data": ...,\n      ...\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"will replace the constants' value with the value provided in configuration declaration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  controller: MapController, // MapController class from '@deck.gl/core'\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      ...\n    })\n  ]\n}\n")),(0,r.kt)("p",null,"Whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter")," component finds a string prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"@@#"),', it looks into a "constants catalog" first and then the "enumerations catalog".'),(0,r.kt)("h3",{id:"enumerations-and-using-the--prefix"},"Enumerations and using the ",(0,r.kt)("inlineCode",{parentName:"h3"},"@@#")," prefix"),(0,r.kt)("p",null,"Often deck.gl visualizations require access to particular enumerations. For this reason, a configuration\nobject can also contain a map of enumerations that should be made available to the @deck.gl/json string\nresolver. The ",(0,r.kt)("inlineCode",{parentName:"p"},"@@#")," prefix on an enumeration triggers this lookup."),(0,r.kt)("p",null,"For example, when this configuration is passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONConverter"),"\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst configuration = {\n  ...\n  enumerations: {\n    COORDINATE_SYSTEM,\n    GL\n  }\n};\n")),(0,r.kt)("p",null,"and used to resolve this JSON object\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "layers": [\n    {\n      "@@type": "ScatterplotLayer",\n      "data": ...,\n      "coordinateSystem": "@@#COORDINATE_SYSTEM.METER_OFFSETS",\n      "parameters": {\n        "blend": true,\n        "blendFunc": ["@@#GL.ONE", "@@#GL.ZERO", "@@#GL.SRC_ALPHA", "@@#GL.DST_ALPHA"]\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"@@#<enum-name>.<enum-value>")," will be resolved to values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"enumerations")," config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  layers: [\n    new ScatterplotLayer({\n      data: ...,\n      coordinateSystem: 2,  // The enumerated value of COORDINATE_SYSTEM.METER_OFFSETS\n      parameters: {\n        blend: true,\n        blendFunc: [1, 0, 770, 772]\n      }\n    })\n  ]\n}\n")),(0,r.kt)("h2",{id:"functions-and-using-the--prefix"},"Functions and using the ",(0,r.kt)("inlineCode",{parentName:"h2"},"@@=")," prefix"),(0,r.kt)("p",null,"Functions are parsed from value strings with a ",(0,r.kt)("inlineCode",{parentName:"p"},"@@=")," prefix."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    "layers": [{\n        "@@type": "HexagonLayer",\n        "data": [\n            {"lat":0,"lng":0},\n            {"lat":0,"lng":0},\n            {"lat":0,"lng":0},\n            {"lat":1.2,"lng":1.2},\n            {"lat":1.2,"lng":1.2},\n            {"lat":1.2,"lng":1.2}\n        ],\n        "getPosition": "@@=[lng, lat]",\n')),(0,r.kt)("p",null,"In this case, a function is generated of the format ",(0,r.kt)("inlineCode",{parentName:"p"},'(datum) => [datum["lng"], datum["lng"]]'),", reading\nfrom the JSON data rows."),(0,r.kt)("p",null,"Passing ",(0,r.kt)("inlineCode",{parentName:"p"},"@@=-")," will simply return a function of the format ",(0,r.kt)("inlineCode",{parentName:"p"},"(datum) => (datum)"),". For example, if data were\nan array of coordinates (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"[[0, 1], [0, 5]]"),"), passing ",(0,r.kt)("inlineCode",{parentName:"p"},"@@=-")," would return those values."),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"@@=")," provides access to a small Javascript expression parser. You can apply basic Boolean,\ninline conditionals, and arithmetic operations via this parser.\nFor example, the following are all valid functions\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"getPosition": "@@=[lng, lat, altitudeMeters]",\n"getFillColor": "@@=[color / 255, 200, 20]",\n"getLineColor": "@@=value > 10 ? [255, 0, 0] : [0, 255, 200]",\n')),(0,r.kt)("p",null,"Each would be evaluated to an expression equivalent to\u2013"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"datum => [datum.lng, datum.lat, altitudeMeters / 1000]\ndatum => [datum.color / 255, 200, 20]\ndatum => datum.value > 10 ? [255, 0, 0] : [0, 255, 200]\n")))}d.isMDXComponent=!0}}]);