"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8469],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(k,l(l({ref:t},s),{},{components:a})):n.createElement(k,l({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},22844:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},l="GoogleMapsOverlay",i={unversionedId:"api-reference/google-maps/google-maps-overlay",id:"api-reference/google-maps/google-maps-overlay",title:"GoogleMapsOverlay",description:"This class implements the OverlayView/WebGLOverlayView (depending on map rendering type) interface and can be used as any other Google Maps overlay.",source:"@site/../docs/api-reference/google-maps/google-maps-overlay.md",sourceDirName:"api-reference/google-maps",slug:"/api-reference/google-maps/google-maps-overlay",permalink:"/deck.gl/docs/api-reference/google-maps/google-maps-overlay",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/google-maps/google-maps-overlay.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"@deck.gl/google-maps",permalink:"/deck.gl/docs/api-reference/google-maps/overview"},next:{title:"@deck.gl/extensions",permalink:"/deck.gl/docs/api-reference/extensions/overview"}},p={},c=[{value:"Vector/Raster maps",id:"vectorraster-maps",level:2},{value:"Usage",id:"usage",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>setMap</code>",id:"setmap",level:5},{value:"<code>setProps</code>",id:"setprops",level:5},{value:"<code>pickObject</code>",id:"pickobject",level:5},{value:"<code>pickObjects</code>",id:"pickobjects",level:5},{value:"<code>pickMultipleObjects</code>",id:"pickmultipleobjects",level:5},{value:"<code>finalize</code>",id:"finalize",level:5},{value:"getCanvas",id:"getcanvas",level:5}],s={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"googlemapsoverlay"},"GoogleMapsOverlay"),(0,r.kt)("p",null,"This class implements the ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/javascript/reference/overlay-view#OverlayView"},"OverlayView"),"/",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/maps/documentation/javascript/reference/webgl#WebGLOverlayView"},"WebGLOverlayView")," (depending on map rendering type) interface and can be used as any other Google Maps overlay."),(0,r.kt)("h2",{id:"vectorraster-maps"},"Vector/Raster maps"),(0,r.kt)("p",null,"As detailed in the ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/google-maps/overview"},"overview"),", the overlay supports both Vector and Raster Google map rendering. Depending on the Google Map configuration, the correct deck.gl overlay rendering method will be chosen at runtime."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"  import {GoogleMapsOverlay as DeckOverlay} from '@deck.gl/google-maps';\n  import {GeoJsonLayer} from '@deck.gl/layers';\n\n  // Create map\n  const map = new google.maps.Map(document.getElementById('map'), {\n    center: { lat: 40, lng: -100 },\n    zoom: 5,\n    mapId: GOOGLE_MAP_ID // Only required for Vector maps\n  });\n\n  // Create overlay instance\n  const overlay = new DeckOverlay({\n    layers: [\n      new GeoJsonLayer({\n        ...\n      })\n    ]\n  });\n  // Add overlay to map\n  overlay.setMap(map);\n")),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const overlay = new GoogleMapsOverlay(props)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"props")," are forwarded to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Deck")," instance. The following ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"Deck")," props are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"style")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"layers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"effects")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pickingRadius")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useDevicePixels")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onWebGLInitialized")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onBeforeRender")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onAfterRender")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onLoad"))),(0,r.kt)("p",null,"The constructor additionally accepts the following option:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"interleaved")," (Boolean) - When set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", a dedicated deck.gl canvas is layered on top of the base map. If set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," and the Google Map is configured for Vector rendering, deck.gl layers are inserted into the Google Maps layer stack, sharing the same WebGL2RenderingContext. Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h5",{id:"setmap"},(0,r.kt)("inlineCode",{parentName:"h5"},"setMap")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"overlay.setMap(map);\n")),(0,r.kt)("p",null,"Add/remove the overlay from a map. An overlay can be temporarily hidden from a map by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"setMap(null)"),". Removing an overlay does not destroy the WebGL2 context; use ",(0,r.kt)("inlineCode",{parentName:"p"},"finalize()")," if the overlay should be permanently removed."),(0,r.kt)("h5",{id:"setprops"},(0,r.kt)("inlineCode",{parentName:"h5"},"setProps")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"overlay.setProps(props);\n")),(0,r.kt)("p",null,"Update (partial) props."),(0,r.kt)("h5",{id:"pickobject"},(0,r.kt)("inlineCode",{parentName:"h5"},"pickObject")),(0,r.kt)("p",null,"Equivalent of ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"deck.pickObject"),"."),(0,r.kt)("h5",{id:"pickobjects"},(0,r.kt)("inlineCode",{parentName:"h5"},"pickObjects")),(0,r.kt)("p",null,"Equivalent of ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"deck.pickObjects"),"."),(0,r.kt)("h5",{id:"pickmultipleobjects"},(0,r.kt)("inlineCode",{parentName:"h5"},"pickMultipleObjects")),(0,r.kt)("p",null,"Equivalent of ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"deck.pickMultipleObjects"),"."),(0,r.kt)("h5",{id:"finalize"},(0,r.kt)("inlineCode",{parentName:"h5"},"finalize")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"overlay.finalize();\n")),(0,r.kt)("p",null,"Remove the overlay and release all underlying resources."),(0,r.kt)("h5",{id:"getcanvas"},"getCanvas"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#getcanvas"},"Deck.getCanvas"),". When using ",(0,r.kt)("inlineCode",{parentName:"p"},"interleaved: true"),", returns the base map's ",(0,r.kt)("inlineCode",{parentName:"p"},"canvas"),"."))}m.isMDXComponent=!0}}]);