"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5046],{93279:(r,e,t)=>{t.d(e,{Gf:()=>f,I3:()=>d,N4:()=>i,cJ:()=>l,kB:()=>y,n1:()=>s,nv:()=>c,tR:()=>m,wi:()=>u,zX:()=>o,zx:()=>a});var o=6371008.8,n={centimeters:100*o,centimetres:100*o,degrees:o/111325,feet:3.28084*o,inches:39.37*o,kilometers:o/1e3,kilometres:o/1e3,meters:o,metres:o,miles:o/1609.344,millimeters:1e3*o,millimetres:1e3*o,nauticalmiles:o/1852,radians:1,yards:1.0936*o};function i(r,e,t){void 0===t&&(t={});var o={type:"Feature"};return(0===t.id||t.id)&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.properties=e||{},o.geometry=r,o}function a(r,e,t){if(void 0===t&&(t={}),!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!w(r[0])||!w(r[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:r},e,t)}function s(r,e,t){void 0===t&&(t={});for(var o=0,n=r;o<n.length;o++){var a=n[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:r},e,t)}function u(r,e,t){if(void 0===t&&(t={}),r.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:r},e,t)}function y(r,e,t){return void 0===t&&(t={}),i({type:"MultiPoint",coordinates:r},e,t)}function l(r,e){void 0===e&&(e="kilometers");var t=n[e];if(!t)throw new Error(e+" units is invalid");return r*t}function f(r,e){void 0===e&&(e="kilometers");var t=n[e];if(!t)throw new Error(e+" units is invalid");return r/t}function c(r){return 180*(r%(2*Math.PI))/Math.PI}function m(r){return r%360*Math.PI/180}function d(r,e,t){if(void 0===e&&(e="kilometers"),void 0===t&&(t="kilometers"),!(r>=0))throw new Error("length must be a positive number");return l(f(r,e),t)}function w(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}},45046:(r,e,t)=>{t.d(e,{$R:()=>n,Pw:()=>s,bg:()=>a,mo:()=>i,uG:()=>o});t(93279);function o(r){if(!r)throw new Error("coord is required");if(!Array.isArray(r)){if("Feature"===r.type&&null!==r.geometry&&"Point"===r.geometry.type)return r.geometry.coordinates;if("Point"===r.type)return r.coordinates}if(Array.isArray(r)&&r.length>=2&&!Array.isArray(r[0])&&!Array.isArray(r[1]))return r;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function n(r){if(Array.isArray(r))return r;if("Feature"===r.type){if(null!==r.geometry)return r.geometry.coordinates}else if(r.coordinates)return r.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function i(r,e,t){if(!r)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!r||"Feature"!==r.type||!r.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!r.geometry||r.geometry.type!==e)throw new Error("Invalid input to "+t+": must be a "+e+", given "+r.geometry.type)}function a(r){return"Feature"===r.type?r.geometry:r}function s(r,e){return"FeatureCollection"===r.type?"FeatureCollection":"GeometryCollection"===r.type?"GeometryCollection":"Feature"===r.type&&null!==r.geometry?r.geometry.type:r.type}}}]);