"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[8987],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},91263:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(83117),o=(r(67294),r(3905));const a={},i="FlyToInterpolator",l={unversionedId:"api-reference/core/fly-to-interpolator",id:"api-reference/core/fly-to-interpolator",title:"FlyToInterpolator",description:'Performs "fly to" style interpolation between two geospatial view states. Implements TransitionInterpolator.',source:"@site/../docs/api-reference/core/fly-to-interpolator.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/fly-to-interpolator",permalink:"/deck.gl/docs/api-reference/core/fly-to-interpolator",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/fly-to-interpolator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LinearInterpolator",permalink:"/deck.gl/docs/api-reference/core/linear-interpolator"},next:{title:"TransitionInterpolator",permalink:"/deck.gl/docs/api-reference/core/transition-interpolator"}},p={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Source",id:"source",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flytointerpolator"},"FlyToInterpolator"),(0,o.kt)("p",null,'Performs "fly to" style interpolation between two geospatial view states. Implements ',(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/transition-interpolator"},"TransitionInterpolator"),"."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/view-state-transitions"},"View State Transitions")," for usage examples."),(0,o.kt)("h2",{id:"constructor"},"Constructor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {FlyToInterpolator} from '@deck.gl/core';\n\nnew FlyToInterpolator({speed: 2});\n")),(0,o.kt)("p",null,"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"options (Object)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"curve"),' (Number, optional) - The zooming "curve" that will occur along the flight path. Default ',(0,o.kt)("inlineCode",{parentName:"li"},"1.414"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"speed")," (Number, optional) - The average speed of the animation defined in relation to ",(0,o.kt)("inlineCode",{parentName:"li"},"options.curve"),", it linearly affects the duration, higher speed returns smaller durations and vice versa. Default ",(0,o.kt)("inlineCode",{parentName:"li"},"1.2"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"screenSpeed")," (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to ",(0,o.kt)("inlineCode",{parentName:"li"},"speed")," it linearly affects the duration,  when specified ",(0,o.kt)("inlineCode",{parentName:"li"},"speed")," is ignored."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"maxDuration")," (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, ",(0,o.kt)("inlineCode",{parentName:"li"},"0")," is returned.")))),(0,o.kt)("h2",{id:"source"},"Source"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/tree/9.0-release/modules/core/src/transitions/fly-to-interpolator.ts"},"modules/core/src/transitions/fly-to-interpolator.ts")))}d.isMDXComponent=!0}}]);