"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[498],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(a),m=r,h=s["".concat(p,".").concat(m)]||s[m]||u[m]||i;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},30788:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={},o="fetchMap",l={unversionedId:"api-reference/carto/fetch-map",id:"api-reference/carto/fetch-map",title:"fetchMap",description:"CARTO Builder is a powerful tool for designing map visualizations. With the fetchMap function, you can easily instantiate layers configured in Builder for use with deck.gl. It is available starting with CARTO Maps API version v3 and deck.gl 8.7.",source:"@site/../docs/api-reference/carto/fetch-map.md",sourceDirName:"api-reference/carto",slug:"/api-reference/carto/fetch-map",permalink:"/deck.gl/docs/api-reference/carto/fetch-map",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/fetch-map.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BASEMAP",permalink:"/deck.gl/docs/api-reference/carto/basemap"},next:{title:"Data Sources",permalink:"/deck.gl/docs/api-reference/carto/data-sources"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"Static display of a CARTO map",id:"static-display-of-a-carto-map",level:3},{value:"Integration with CARTO basemaps",id:"integration-with-carto-basemaps",level:3},{value:"Parameters",id:"parameters",level:2},{value:"<code>cartoMapId</code> (String)",id:"cartomapid",level:5},{value:"<code>credentials</code> (Object, optional)",id:"credentials",level:5},{value:"<code>headers</code> (Object, optional)",id:"headers",level:5},{value:"<code>autoRefresh</code> (Number, optional)",id:"autorefresh",level:5},{value:"<code>onNewData</code> (Function, Optional)",id:"onnewdata",level:5},{value:"Return value",id:"return-value",level:2},{value:"<code>id</code> (String)",id:"id",level:5},{value:"<code>title</code> (String)",id:"title",level:5},{value:"<code>description</code> (String)",id:"description",level:5},{value:"<code>createdAt</code> (String)",id:"createdat",level:5},{value:"<code>updatedAt</code> (String)",id:"updatedat",level:5},{value:"<code>initialViewState</code> (String)",id:"initialviewstate",level:5},{value:"<code>mapStyle</code> (String)",id:"mapstyle",level:5},{value:"<code>layers</code> (Array)",id:"layers",level:5},{value:"<code>stopAutoRefresh</code> (Function)",id:"stopautorefresh",level:5},{value:"Auto-refreshing",id:"auto-refreshing",level:2}],d={toc:c},s="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"fetchmap"},"fetchMap"),(0,r.kt)("p",null,"CARTO ",(0,r.kt)("a",{parentName:"p",href:"https://carto.com/builder/"},"Builder")," is a powerful tool for designing map visualizations. With the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchMap")," function, you can easily instantiate layers configured in Builder for use with deck.gl. It is available starting with CARTO Maps API version v3 and deck.gl 8.7."),(0,r.kt)("div",{align:"center"},(0,r.kt)("div",null,(0,r.kt)("img",{src:"https://raw.githubusercontent.com/visgl/deck.gl-data/master/images/docs/fetch-map.gif"}),(0,r.kt)("p",null,(0,r.kt)("i",null,"Loading a Builder map with deck.gl")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"static-display-of-a-carto-map"},"Static display of a CARTO map"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck} from '@deck.gl/core';\nimport {fetchMap} from '@deck.gl/carto';\n\nconst cartoMapId = 'ff6ac53f-741a-49fb-b615-d040bc5a96b8';\nfetchMap({cartoMapId}).then(map => new Deck(map));\n")),(0,r.kt)("h3",{id:"integration-with-carto-basemaps"},"Integration with CARTO basemaps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import mapboxgl from 'mapbox-gl';\n\nfetchMap({cartoMapId}).then(({initialViewState, mapStyle, layers}) => {\n  // Add Mapbox GL for the basemap. It's not a requirement if you don't need a basemap.\n  const MAP_STYLE = `https://basemaps.cartocdn.com/gl/${mapStyle.styleType}-gl-style/style.json`;\n  const deckgl = new deck.DeckGL({\n    container: 'container',\n    controller: true,\n    mapStyle: MAP_STYLE,\n    initialViewState,\n    layers\n  });\n});\n")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const map = await fetchMap({cartoMapId, credentials, autoRefresh, onNewData});\n")),(0,r.kt)("h5",{id:"cartomapid"},(0,r.kt)("inlineCode",{parentName:"h5"},"cartoMapId")," (String)"),(0,r.kt)("p",null,"Required. Identifier of map created in CARTO Builder."),(0,r.kt)("h5",{id:"credentials"},(0,r.kt)("inlineCode",{parentName:"h5"},"credentials")," (Object, optional)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/carto/overview#carto-credentials"},"CARTO Credentials")," to use in API requests."),(0,r.kt)("h5",{id:"headers"},(0,r.kt)("inlineCode",{parentName:"h5"},"headers")," (Object, optional)"),(0,r.kt)("p",null,"Custom headers to include in the map instantiation requests."),(0,r.kt)("h5",{id:"autorefresh"},(0,r.kt)("inlineCode",{parentName:"h5"},"autoRefresh")," (Number, optional)"),(0,r.kt)("p",null,"Interval in seconds at which to autoRefresh the data. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"onNewData")," must also be provided."),(0,r.kt)("h5",{id:"onnewdata"},(0,r.kt)("inlineCode",{parentName:"h5"},"onNewData")," (Function, Optional)"),(0,r.kt)("p",null,"Callback function that will be invoked whenever data in layers is changed. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"autoRefresh")," must also be provided."),(0,r.kt)("h2",{id:"return-value"},"Return value"),(0,r.kt)("p",null,"When invoked with a given ",(0,r.kt)("inlineCode",{parentName:"p"},"cartoMapId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchMap")," will retrieve the information about the map from CARTO, generate appropriate layers and populate them with data. The properties of the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," are as follows:"),(0,r.kt)("h5",{id:"id"},(0,r.kt)("inlineCode",{parentName:"h5"},"id")," (String)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"cartoMapId"),"."),(0,r.kt)("h5",{id:"title"},(0,r.kt)("inlineCode",{parentName:"h5"},"title")," (String)"),(0,r.kt)("p",null,"The title given to the map in CARTO Builder."),(0,r.kt)("h5",{id:"description"},(0,r.kt)("inlineCode",{parentName:"h5"},"description")," (String)"),(0,r.kt)("p",null,"The description given to the map in CARTO Builder."),(0,r.kt)("h5",{id:"createdat"},(0,r.kt)("inlineCode",{parentName:"h5"},"createdAt")," (String)"),(0,r.kt)("p",null,"When the map was created."),(0,r.kt)("h5",{id:"updatedat"},(0,r.kt)("inlineCode",{parentName:"h5"},"updatedAt")," (String)"),(0,r.kt)("p",null,"When the map was last updated."),(0,r.kt)("h5",{id:"initialviewstate"},(0,r.kt)("inlineCode",{parentName:"h5"},"initialViewState")," (String)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/developer-guide/views#view-state"},"view state"),"."),(0,r.kt)("h5",{id:"mapstyle"},(0,r.kt)("inlineCode",{parentName:"h5"},"mapStyle")," (String)"),(0,r.kt)("p",null,"An identifier describing the ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/carto/basemap#supported-basemaps"},"basemap")," configured in CARTO Builder."),(0,r.kt)("h5",{id:"layers"},(0,r.kt)("inlineCode",{parentName:"h5"},"layers")," (Array)"),(0,r.kt)("p",null,"A collection of deck.gl ",(0,r.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/layer"},"layers"),"."),(0,r.kt)("h5",{id:"stopautorefresh"},(0,r.kt)("inlineCode",{parentName:"h5"},"stopAutoRefresh")," (Function)"),(0,r.kt)("p",null,"A function to invoke to stop auto-refreshing. Only present if ",(0,r.kt)("inlineCode",{parentName:"p"},"autoRefresh")," option was provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchMap"),"."),(0,r.kt)("h2",{id:"auto-refreshing"},"Auto-refreshing"),(0,r.kt)("p",null,"With dynamic data sources, the ",(0,r.kt)("inlineCode",{parentName:"p"},"autoRefresh")," option to ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchMap")," makes it simple to create an live-updating map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const deck = new Deck({canvas: 'deck-canvas'});\nconst mapConfiguration = {\n  autoRefresh: 5,\n  cartoMapId,\n  onNewData: ({layers}) => {\n    deck.setProps({layers});\n  }\n};\n\nconst {initialViewState, layers, stopAutoRefresh} = await fetchMap(mapConfiguration);\ndeck.setProps({controller: true, initialViewState, layers});\n\nbuttonElement.addEventListener('click', () => {\n  stopAutoRefresh();\n});\n")))}u.isMDXComponent=!0}}]);