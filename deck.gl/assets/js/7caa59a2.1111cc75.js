"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5324],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),u=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(g,s(s({ref:t},i),{},{components:r})):a.createElement(g,s({ref:t},i))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:n,s[1]=l;for(var u=2;u<o;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},89979:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(83117),n=(r(67294),r(3905));const o={},s="Data Sources",l={unversionedId:"api-reference/carto/data-sources",id:"api-reference/carto/data-sources",title:"Data Sources",description:"To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers fetch function, except that rather than passing a URL, options that specify the data in the CARTO are used.",source:"@site/../docs/api-reference/carto/data-sources.md",sourceDirName:"api-reference/carto",slug:"/api-reference/carto/data-sources",permalink:"/deck.gl/docs/api-reference/carto/data-sources",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/carto/data-sources.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"fetchMap",permalink:"/deck.gl/docs/api-reference/carto/fetch-map"},next:{title:"H3TileLayer",permalink:"/deck.gl/docs/api-reference/carto/h3-tile-layer"}},c={},u=[{value:"Overview",id:"overview",level:3},{value:"Promise API",id:"promise-api",level:3},{value:"Types",id:"types",level:3},{value:"Caching",id:"caching",level:3},{value:"Available Data Sources",id:"available-data-sources",level:3},{value:"vectorTableSource",id:"vectortablesource",level:4},{value:"vectorQuerySource",id:"vectorquerysource",level:4},{value:"vectorTilesetSource",id:"vectortilesetsource",level:4},{value:"h3TableSource",id:"h3tablesource",level:4},{value:"h3QuerySource",id:"h3querysource",level:4},{value:"h3TilesetSource",id:"h3tilesetsource",level:4},{value:"quadbinTableSource",id:"quadbintablesource",level:4},{value:"quadbinQuerySource",id:"quadbinquerysource",level:4},{value:"quadbinTilesetSource",id:"quadbintilesetsource",level:4},{value:"rasterTilesetSource",id:"rastertilesetsource",level:4},{value:"QueryParameters",id:"queryparameters",level:3}],i={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"data-sources"},"Data Sources"),(0,n.kt)("p",null,"To ease interacting with the CARTO platform, the CARTO deck.gl module includes a number of functions, which simplify the use of fetching your data from CARTO. At a high level these can be thought of as wrappers around the browsers ",(0,n.kt)("inlineCode",{parentName:"p"},"fetch")," function, except that rather than passing a URL, options that specify the data in the CARTO are used."),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)("p",null,"The data source functions are a compact way to describe the data that you want to fetch. For example, to fetch a table from a data warehouse from the connection ",(0,n.kt)("inlineCode",{parentName:"p"},"carto_dw"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {vectorTableSource} from '@deck.gl/carto';\nconst data = vectorTableSource({\n  accessToken: 'XXX',\n  connectionName: 'carto_dw',\n  tableName: 'carto-demo-data.demo_tables.chicago_crime_sample',\n})\n")),(0,n.kt)("h3",{id:"promise-api"},"Promise API"),(0,n.kt)("p",null,"All data source functions return a Promise, which can be resolved to obtain the actual Tilejson. However, as the ",(0,n.kt)("a",{parentName:"p",href:"../core/layer#data"},"core deck.gl Layer prop supports Promises"),", it is often not necessary to resolve or await the Promise and the data source can be directly passed to the data prop:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"import {H3TileLayer, h3TilesetSource} from '@deck.gl/carto';\nnew H3TileLayer({\n  data: h3TilesetSource({\n    accessToken: 'XXX',\n    connectionName: 'carto_dw',\n    tableName: 'carto-demo-data.demo_tables.h3_data'\n  }),\n\n  getFillColor: d => d.properties.color\n});\n")),(0,n.kt)("h3",{id:"types"},"Types"),(0,n.kt)("p",null,"All the data source functions are fully typed, to aid in providing the correct parameters and working correctly with the return value."),(0,n.kt)("h3",{id:"caching"},"Caching"),(0,n.kt)("p",null,"The dataSource functions have an internal cache, which avoids fetching data from the server if the parameters have not changed. Thus they can be used, for example, in React ",(0,n.kt)("inlineCode",{parentName:"p"},"render()")," functions without needing memoization."),(0,n.kt)("h3",{id:"available-data-sources"},"Available Data Sources"),(0,n.kt)("p",null,"All data source functions take the following global options:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type SourceOptions = {\n  accessToken: string;\n  connectionName: string;\n  apiBaseUrl?: string;\n  clientId?: string;\n  headers?: Record<string, string>;\n  mapsUrl?: string;\n};\n")),(0,n.kt)("p",null,"In addition, the following options are supported on each source:"),(0,n.kt)("h4",{id:"vectortablesource"},"vectorTableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type vectorTableSourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"vectorquerysource"},"vectorQuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type vectorQuerySourceOptions = {\n  columns?: string[];\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"vectortilesetsource"},"vectorTilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type vectorTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"h3tablesource"},"h3TableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3TableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"h3querysource"},"h3QuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3QuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"h3tilesetsource"},"h3TilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type H3TilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"quadbintablesource"},"quadbinTableSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type quadbinTableSourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"quadbinquerysource"},"quadbinQuerySource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type quadbinQuerySourceOptions = {\n  aggregationExp: string;\n  aggregationResLevel?: number;\n  columns?: string[];\n  spatialDataColumn?: string;\n  sqlQuery: string;\n  queryParameters: QueryParameters;\n}\n")),(0,n.kt)("h4",{id:"quadbintilesetsource"},"quadbinTilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type quadbinTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h4",{id:"rastertilesetsource"},"rasterTilesetSource"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"type rasterTilesetSourceOptions = {\n  tableName: string;\n}\n")),(0,n.kt)("h3",{id:"queryparameters"},"QueryParameters"),(0,n.kt)("p",null,"QueryParameters are used to parametrize SQL queries. The format depends on the source's provider, some examples:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://node-postgres.com/features/queries"},"PostgreSQL and Redshift"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js"},"BigQuery positional"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=$1`,\n  queryParameters: ['my-name']\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://cloud.google.com/bigquery/docs/parameterized-queries#node.js"},"BigQuery named parameters"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=@username`,\n  queryParameters: { username: 'my-name' }\n})\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.snowflake.com/en/user-guide/nodejs-driver-use.html#binding-statement-parameters"},"Snowflake positional")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...,\n  sqlQuery: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n")),(0,n.kt)("p",null,"or"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  data: `select * from users where username=:1`,\n  queryParameters: ['my-name']\n});\n")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/markdirish/node-odbc#bindparameters-callback"},"Databricks ODBC")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"vectorQuerySource({\n  ...\n  data: `select * from users where username=?`,\n  queryParameters: ['my-name']\n});\n")))}m.isMDXComponent=!0}}]);