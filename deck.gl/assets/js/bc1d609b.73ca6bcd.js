"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5036],{17015:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"api-reference/widgets/stats-widget","title":"StatsWidget (Experimental)","description":"Displays performance and debugging statistics from deck.gl, luma.gl, or custom probe.gl stats objects in a collapsible widget.","source":"@site/../docs/api-reference/widgets/stats-widget.md","sourceDirName":"api-reference/widgets","slug":"/api-reference/widgets/stats-widget","permalink":"/deck.gl/docs/api-reference/widgets/stats-widget","draft":false,"unlisted":false,"editUrl":"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/widgets/stats-widget.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SplitterWidget (Experimental)","permalink":"/deck.gl/docs/api-reference/widgets/splitter-widget"},"next":{"title":"ThemeWidget (Experimental)","permalink":"/deck.gl/docs/api-reference/widgets/theme-widget"}}');var r=s(74848),n=s(28453);const d={},c="StatsWidget (Experimental)",l={},a=[{value:"Usage",id:"usage",level:2},{value:"Types",id:"types",level:2},{value:"<code>StatsWidgetProps</code>",id:"statswidgetprops",level:3},{value:"Built-in Formatters",id:"built-in-formatters",level:3},{value:"Behavior",id:"behavior",level:2}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"statswidget-experimental",children:"StatsWidget (Experimental)"})}),"\n",(0,r.jsx)(t.p,{children:"Displays performance and debugging statistics from deck.gl, luma.gl, or custom probe.gl stats objects in a collapsible widget."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import {StatsWidget} from '@deck.gl/widgets';\n"})}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import {Deck} from '@deck.gl/core';\nimport {StatsWidget} from '@deck.gl/widgets';\n\nconst deck = new Deck({\n  widgets: [\n    new StatsWidget({\n      type: 'deck',\n      framesPerUpdate: 5\n    })\n  ]\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(t.h3,{id:"statswidgetprops",children:(0,r.jsx)(t.code,{children:"StatsWidgetProps"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"StatsWidget"})," accepts the generic ",(0,r.jsx)(t.a,{href:"/deck.gl/docs/api-reference/core/widget#widgetprops",children:(0,r.jsx)(t.code,{children:"WidgetProps"})})," and:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"type"})," (string, default ",(0,r.jsx)(t.code,{children:"'deck'"}),") - Type of stats to display: ",(0,r.jsx)(t.code,{children:"'deck'"}),", ",(0,r.jsx)(t.code,{children:"'luma'"}),", ",(0,r.jsx)(t.code,{children:"'device'"}),", or ",(0,r.jsx)(t.code,{children:"'custom'"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"stats"})," (Stats, optional) - Custom stats object when using ",(0,r.jsx)(t.code,{children:"type: 'custom'"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"title"})," (string, default ",(0,r.jsx)(t.code,{children:"'Stats'"}),") - Title shown in the widget header"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"framesPerUpdate"})," (number, default ",(0,r.jsx)(t.code,{children:"1"}),") - Number of frames to wait between updates"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"formatters"})," (object, default ",(0,r.jsx)(t.code,{children:"{}"}),") - Custom formatters for stat values"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"resetOnUpdate"})," (object, default ",(0,r.jsx)(t.code,{children:"{}"}),") - Whether to reset particular stats after each update"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"built-in-formatters",children:"Built-in Formatters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'count'"})," - Display raw count value"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'averageTime'"})," - Format as average time in ms/s"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'totalTime'"})," - Format as total time in ms/s"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'fps'"})," - Format as frames per second"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'memory'"})," - Format as memory in MB"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Click the header to expand/collapse the stats display"}),"\n",(0,r.jsxs)(t.li,{children:["Stats are automatically updated based on ",(0,r.jsx)(t.code,{children:"framesPerUpdate"})]}),"\n",(0,r.jsxs)(t.li,{children:["Different stat types provide access to various performance metrics:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'deck'"}),": deck.gl rendering statistics"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'luma'"}),": luma.gl WebGL statistics"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'device'"}),": GPU device statistics"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'custom'"}),": User-provided stats object"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>c});var i=s(96540);const r={},n=i.createContext(r);function d(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);