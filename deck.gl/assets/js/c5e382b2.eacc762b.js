"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[7477],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>f});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=o.createContext({}),p=function(e){var r=o.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=p(e.components);return o.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=n,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return t?o.createElement(f,a(a({ref:r},s),{},{components:t})):o.createElement(f,a({ref:r},s))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,a=new Array(l);a[0]=m;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:n,a[1]=i;for(var p=2;p<l;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},78069:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=t(83117),n=(t(67294),t(3905));const l={},a="GlobeController (Experimental)",i={unversionedId:"api-reference/core/globe-controller",id:"api-reference/core/globe-controller",title:"GlobeController (Experimental)",description:"Inherits from Base Controller.",source:"@site/../docs/api-reference/core/globe-controller.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/globe-controller",permalink:"/deck.gl/docs/api-reference/core/globe-controller",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/globe-controller.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MapController",permalink:"/deck.gl/docs/api-reference/core/map-controller"},next:{title:"FirstPersonController",permalink:"/deck.gl/docs/api-reference/core/first-person-controller"}},c={},p=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Custom GlobeController",id:"custom-globecontroller",level:2},{value:"Source",id:"source",level:2}],s={toc:p},u="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,o.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"globecontroller-experimental"},"GlobeController (Experimental)"),(0,n.kt)("p",null,"Inherits from ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller"},"Base Controller"),"."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"GlobeController")," class can be passed to either the ",(0,n.kt)("inlineCode",{parentName:"p"},"Deck")," class's ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck#controller"},"controller")," prop or a ",(0,n.kt)("inlineCode",{parentName:"p"},"View")," class's ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/view#controller"},"controller")," prop to specify that viewport interaction should be enabled."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GlobeController")," is the default controller for ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/globe-view"},"GlobeView"),"."),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"Use with the default view:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, _GlobeView as GlobeView} from '@deck.gl/core';\n\nnew Deck({\n  views: new GlobeView(),\n  controller: {keyboard: false, inertia: true},\n  initialViewState: viewState\n});\n")),(0,n.kt)("p",null,"is equivalent to:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, _GlobeView as GlobeView} from '@deck.gl/core';\n\nnew Deck({\n  views: new GlobeView({\n    controller: {keyboard: false, inertia: true}\n  }),\n  initialViewState: viewState\n})\n")),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("p",null,"Supports all ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller#options"},"Controller options")," with the following default behavior:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dragPan"),": default ",(0,n.kt)("inlineCode",{parentName:"li"},"'pan'")," (drag to pan)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dragRotate"),": not effective, this view does not currently support rotation"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"touchRotate"),": not effective, this view does not currently support rotation"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"keyboard"),": arrow keys to pan, +/- to zoom")),(0,n.kt)("h2",{id:"custom-globecontroller"},"Custom GlobeController"),(0,n.kt)("p",null,"You can further customize the ",(0,n.kt)("inlineCode",{parentName:"p"},"GlobeController"),"'s behavior by extending the class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import {Deck, _GlobeView as GlobeView, _GlobeController as GlobeController} from '@deck.gl/core';\n\nclass MyGlobeController extends GlobeController {\n\n  handleEvent(event) {\n    if (event.type === 'pan') {\n      // do something\n    } else {\n      super.handleEvent(event);\n    }\n  }\n}\n\nnew Deck({\n  views: new GlobeView(),\n  controller: {type: MyGlobeController},\n  initialViewState: viewState\n})\n")),(0,n.kt)("p",null,"See the ",(0,n.kt)("inlineCode",{parentName:"p"},"Controller")," class ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/controller#methods"},"documentation")," for the methods that you can use and/or override."),(0,n.kt)("h2",{id:"source"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/visgl/deck.gl/blob/master/modules/core/src/controllers/globe-controller.ts"},"modules/core/src/controllers/globe-controller.ts")))}d.isMDXComponent=!0}}]);