"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[5645],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),l=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=l(r),f=n,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||i;return r?o.createElement(m,c(c({ref:t},s),{},{components:r})):o.createElement(m,c({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,c=new Array(i);c[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:n,c[1]=a;for(var l=2;l<i;l++)c[l]=r[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},17234:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=r(87462),n=(r(67294),r(3905));const i={},c="project32 (Shader Module)",a={unversionedId:"api-reference/core/project32",id:"api-reference/core/project32",title:"project32 (Shader Module)",description:"The project32 shader module is an extension of the project shader module that adds some projection utilities.",source:"@site/../docs/api-reference/core/project32.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/project32",permalink:"/deck.gl/docs/api-reference/core/project32",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/core/project32.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"project (Shader Module)",permalink:"/deck.gl/docs/api-reference/core/project"},next:{title:"project64 (Shader Module)",permalink:"/deck.gl/docs/api-reference/core/project64"}},p={},l=[{value:"GLSL Functions",id:"glsl-functions",level:2},{value:"project_position_to_clipspace",id:"project_position_to_clipspace",level:3}],s={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"project32-shader-module"},"project32 (Shader Module)"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"project32")," shader module is an extension of the ",(0,n.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/project"},"project")," shader module that adds some projection utilities."),(0,n.kt)("h2",{id:"glsl-functions"},"GLSL Functions"),(0,n.kt)("h3",{id:"project_position_to_clipspace"},"project_position_to_clipspace"),(0,n.kt)("p",null,"32 bit implementation of the ",(0,n.kt)("inlineCode",{parentName:"p"},"project_position_to_clipspace")," interface."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-glsl"},"vec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset)\nvec4 project_position_to_clipspace(vec3 position, vec3 position64Low, vec3 offset, out vec4 commonPosition)\n")),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"position")," - vertex position in the layer's coordinate system."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"position64Low")," - lower part of the vertex position, calculated as ",(0,n.kt)("inlineCode",{parentName:"li"},"aLow = a - Math.fround(a)"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"offset")," - offset from the coordinate, in common space"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"commonPosition")," - projected position in the common space")),(0,n.kt)("p",null,"Returns:\nProjected position in the clipspace."))}d.isMDXComponent=!0}}]);