"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[3550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},l="InteractionTestRunner",o={unversionedId:"api-reference/test-utils/interaction-test-runner",id:"api-reference/test-utils/interaction-test-runner",title:"InteractionTestRunner",description:"Client-side utility for browser-based deck.gl interaction tests.",source:"@site/../docs/api-reference/test-utils/interaction-test-runner.md",sourceDirName:"api-reference/test-utils",slug:"/api-reference/test-utils/interaction-test-runner",permalink:"/deck.gl/docs/api-reference/test-utils/interaction-test-runner",draft:!1,editUrl:"https://github.com/visgl/deck.gl/tree/master/website/../docs/api-reference/test-utils/interaction-test-runner.md",tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Example",id:"example",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor(props: Object)",id:"constructorprops-object",level:3},{value:"add(testCase: Array|Object)",id:"addtestcase-arrayobject",level:3},{value:"run(options: Object)",id:"runoptions-object",level:3},{value:"Members",id:"members",level:2},{value:"isHeadless",id:"isheadless",level:3},{value:"Event",id:"event",level:2},{value:"keypress",id:"keypress",level:3},{value:"click",id:"click",level:3},{value:"mousemove",id:"mousemove",level:3},{value:"drag",id:"drag",level:3},{value:"wait",id:"wait",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interactiontestrunner"},"InteractionTestRunner"),(0,a.kt)("p",null,"Client-side utility for browser-based deck.gl interaction tests."),(0,a.kt)("p",null,"This class is intended to be used with ",(0,a.kt)("inlineCode",{parentName:"p"},"BrowserTestDriver")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"@probe.gl/test-utils"),". Together they support the following workflow:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Launch a Puppeteer instance (headless or non-headless) to run a test application"),(0,a.kt)("li",{parentName:"ul"},"In the test application, create a deck.gl canvas."),(0,a.kt)("li",{parentName:"ul"},"For each test case, dispatch a sequence of keyboard/mouse events, and check the updated state."),(0,a.kt)("li",{parentName:"ul"},"Proceed to the next test case until done.")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/test-utils/snapshot-test-runner"},"SnapshotTestRunner")," for Node side set up instructions."),(0,a.kt)("p",null,"In your script that is run on the browser:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const {InteractionTestRunner} = require('@deck.gl/test-utils');\n\nconst TEST_CASES = [\n  {\n    name: 'MapController',\n    events: [\n      {type: 'drag', startX: 400, startY: 200, endX: 300, endY: 200, steps: 3}\n    ],\n    onBeforeEvents: ({deck}) => ({viewport: deck.getViewports[0]}),\n    onAfterEvents: ({deck, context}) => {\n      const oldViewport = context.viewport;\n      const newViewport = deck.getViewports[0];\n      t.ok(newViewport.longitude > oldViewport.longitude, 'map moved');\n    }\n  }\n];\n\nnew TestRender({\n  width: 800,\n  height: 600,\n  initialViewState: {\n    longitude: -122.4,\n    latitude: 37.8,\n    zoom: 12\n  },\n  controller: true\n})\n  .add(TEST_CASES)\n  .run()\n  .then(window.browserTestDriver_finish);\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"constructorprops-object"},"constructor(props: Object)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"new InteractionTestRunner(deckProps)\n")),(0,a.kt)("p",null,"Create a InteractionTestRunner instance. The ",(0,a.kt)("inlineCode",{parentName:"p"},"deckProps")," argument is passed to the ",(0,a.kt)("a",{parentName:"p",href:"/deck.gl/docs/api-reference/core/deck"},"Deck")," constructor."),(0,a.kt)("h3",{id:"addtestcase-arrayobject"},"add(testCase: Array|Object)"),(0,a.kt)("p",null,"Add one or a list of test cases. Each test case may contain the following fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (String) - name of the test case."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"events")," (Array) - a sequence of inputs to dispatch. See ",(0,a.kt)("a",{parentName:"li",href:"#event"},"Event")," section below."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onBeforeEvents")," (Function, optional) - called before the events are dispatched. Receives the following arguments:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deck")," - the Deck instance."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onAfterEvents")," (Function, optional) - called after the events are dispatched. Receives the following arguments:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deck")," - the Deck instance."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"layers")," - the rendered layers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"context")," - the return value of ",(0,a.kt)("inlineCode",{parentName:"li"},"onBeforeEvents"),".")))),(0,a.kt)("h3",{id:"runoptions-object"},"run(options: Object)"),(0,a.kt)("p",null,"Run all test cases."),(0,a.kt)("p",null,"Options:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timeout")," (Number) - time to wait for each test case to resolve (by calling the ",(0,a.kt)("inlineCode",{parentName:"li"},"done")," callback) before aborting, in milliseconds. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"2000"),".")),(0,a.kt)("p",null,"Returns: a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," that resolves when all test cases are done."),(0,a.kt)("h2",{id:"members"},"Members"),(0,a.kt)("h3",{id:"isheadless"},"isHeadless"),(0,a.kt)("p",null,"Whether the test is being run in headless mode. In headless mode, Chromium uses software render which behaves slightly differently from non-headless. Image diffing tolerance may need to be adjusted accordingly."),(0,a.kt)("h2",{id:"event"},"Event"),(0,a.kt)("p",null,"An event is a javascript descriptor of emulated user input. The following event types are supported:"),(0,a.kt)("h3",{id:"keypress"},"keypress"),(0,a.kt)("p",null,"Press a key on the keyboard."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'keypress'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key")," (String) - see ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js"},"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delay")," (Number) - the time between keydown and keyup. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to press the key with the shift key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to press the key with the control key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to press the key with the meta key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h3",{id:"click"},"click"),(0,a.kt)("p",null,"Click the mouse at a given screen coordinate."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'click'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - the screen x of the click."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - the screen y of the click."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"button")," (String) - ",(0,a.kt)("inlineCode",{parentName:"li"},"'left'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'right'")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"'middle'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delay")," (Number) - the time between mousedown and mouse up. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to click with the shift key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to click with the control key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to click with the meta key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h3",{id:"mousemove"},"mousemove"),(0,a.kt)("p",null,"Move the mouse to a given screen coordinate."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'mousemove'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - the screen x to move the pointer to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - the screen y to move the pointer to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps")," (Number) - how many intermediate mousemove events to generate, default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("h3",{id:"drag"},"drag"),(0,a.kt)("p",null,"Drag the mouse from a given screen coordinate to another."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'drag'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startX")," (Number) - the screen x to drag from."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startY")," (Number) - the screen y to drag from."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endX")," (Number) - the screen x to drag to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endY")," (Number) - the screen y to drag to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"button")," (String) - ",(0,a.kt)("inlineCode",{parentName:"li"},"'left'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'right'")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"'middle'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps")," (Number) - how many intermediate mousemove events to generate, default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to click with the shift key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to click with the control key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to click with the meta key pressed. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h3",{id:"wait"},"wait"),(0,a.kt)("p",null,"Idle for a given period of time before the next event."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wait")," (Number) - the timeout in milliseconds.")))}c.isMDXComponent=!0}}]);