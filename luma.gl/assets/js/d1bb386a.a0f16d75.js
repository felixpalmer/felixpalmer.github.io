/*! For license information please see d1bb386a.a0f16d75.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[6725],{9034:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>d,toc:()=>l});var s=t(5893),i=t(1151);const n={},o="Geometry",d={id:"api-reference/engine/geometry/geometry",title:"Geometry",description:"The Geometry class holds a collection of vertex array attributes representing a geometric primitive.",source:"@site/../docs/api-reference/engine/geometry/geometry.md",sourceDirName:"api-reference/engine/geometry",slug:"/api-reference/engine/geometry/",permalink:"/luma.gl/docs/api-reference/engine/geometry/",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/geometry/geometry.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Built-in Geometries",permalink:"/luma.gl/docs/api-reference/engine/geometry/geometries"},next:{title:"Model",permalink:"/luma.gl/docs/api-reference/engine/model"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>id</code> - (<em>string</em>, optional)",id:"id---string-optional",level:3},{value:"drawMode : number",id:"drawmode--number",level:3},{value:"<code>attributes</code> - (<em>object</em>, optional)",id:"attributes---object-optional",level:3},{value:"attributes : Object",id:"attributes--object",level:3},{value:"indices : Accessor",id:"indices--accessor",level:3},{value:"material : Object",id:"material--object",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(props : Object)",id:"constructorprops--object",level:3},{value:"setProps(props : Object)",id:"setpropsprops--object",level:3},{value:"Types and Enumerations",id:"types-and-enumerations",level:2},{value:"drawMode",id:"drawmode",level:3},{value:"Typical Attributes",id:"typical-attributes",level:3},{value:"Remarks",id:"remarks",level:2}];function a(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"geometry",children:"Geometry"}),"\n",(0,s.jsx)(r.p,{children:"The Geometry class holds a collection of vertex array attributes representing a geometric primitive."}),"\n",(0,s.jsxs)(r.p,{children:['A geometry is considered a "primitive" when it can be rendered with a single GPU draw call. Multiple geometry primitives can be composed into a composite geometry using the ',(0,s.jsx)(r.code,{children:"Mesh"})," and ",(0,s.jsx)(r.code,{children:"Model"})," classes."]}),"\n",(0,s.jsxs)(r.p,{children:["To learn more about attributes refer to the ",(0,s.jsx)(r.code,{children:"Accessor"})," class that holds metadata for each attributes."]}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.p,{children:"Create a pyramid geometry (used in lesson 4 of learning WebGL examples)."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"const pyramidGeometry= new Geometry({\n  attributes: {\n    positions: new Float32Array([ ... ]),\n    colors: {\n      size: 4,\n      value: new Float32Array([ ... ])\n    }\n  }\n});\n"})}),"\n",(0,s.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(r.h3,{id:"id---string-optional",children:[(0,s.jsx)(r.code,{children:"id"})," - (",(0,s.jsx)(r.em,{children:"string"}),", optional)"]}),"\n",(0,s.jsx)(r.p,{children:"An id for the model. If not provided, a random unique identifier will be created."}),"\n",(0,s.jsx)(r.h3,{id:"drawmode--number",children:"drawMode : number"}),"\n",(0,s.jsx)(r.p,{children:"The draw mode, or primitive type."}),"\n",(0,s.jsxs)(r.p,{children:["Some options are ",(0,s.jsx)(r.code,{children:"GL.TRIANGLES"})," (default), ",(0,s.jsx)(r.code,{children:"GL.TRIANGLE_STRIP"}),", ",(0,s.jsx)(r.code,{children:"GL.POINTS"}),", ",(0,s.jsx)(r.code,{children:"GL.LINES"}),"."]}),"\n",(0,s.jsxs)(r.h3,{id:"attributes---object-optional",children:[(0,s.jsx)(r.code,{children:"attributes"})," - (",(0,s.jsx)(r.em,{children:"object"}),", optional)"]}),"\n",(0,s.jsx)(r.p,{children:"An object with buffer/attribute names and buffer/attribute descriptors to be set before rendering the model."}),"\n",(0,s.jsx)(r.h3,{id:"attributes--object",children:"attributes : Object"}),"\n",(0,s.jsxs)(r.p,{children:["A map of ",(0,s.jsx)(r.code,{children:"Accessor"})," instances describing the geometry of this primitive."]}),"\n",(0,s.jsx)(r.h3,{id:"indices--accessor",children:"indices : Accessor"}),"\n",(0,s.jsxs)(r.p,{children:["An optional ",(0,s.jsx)(r.code,{children:"Accessor"})," instance that contains the indices (aka elements) for this geometry. Can be ",(0,s.jsx)(r.code,{children:"null"})," or ",(0,s.jsx)(r.code,{children:"undefined"})," if this primitive doesn't use indices. Note that indices can also be stored inside ",(0,s.jsx)(r.code,{children:"attributes"}),"."]}),"\n",(0,s.jsx)(r.h3,{id:"material--object",children:"material : Object"}),"\n",(0,s.jsxs)(r.p,{children:["An object with key/value pairs that indicate how various uniforms should be set up before the GPU draw call. The ",(0,s.jsx)(r.code,{children:"Geometry"})," class itself does not directly use the contents of the ",(0,s.jsx)(r.code,{children:"material"})," field, however other classes such as ",(0,s.jsx)(r.code,{children:"Mesh"})," will refer to it if available, and normally expects it to be set to an instance of the ",(0,s.jsx)(r.code,{children:"Material"})," class."]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"constructorprops--object",children:"constructor(props : Object)"}),"\n",(0,s.jsxs)(r.p,{children:["The constructor for the ",(0,s.jsx)(r.code,{children:"Geometry"})," class. Use this to create a new ",(0,s.jsx)(r.code,{children:"Geometry"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"const geometry = new Geometry(props);\n"})}),"\n",(0,s.jsx)(r.h3,{id:"setpropsprops--object",children:"setProps(props : Object)"}),"\n",(0,s.jsx)(r.p,{children:"Update properties"}),"\n",(0,s.jsx)(r.h2,{id:"types-and-enumerations",children:"Types and Enumerations"}),"\n",(0,s.jsx)(r.h3,{id:"drawmode",children:"drawMode"}),"\n",(0,s.jsx)(r.p,{children:"Follows glTF/OpenGL/WebGL conventions:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Primitive Mode"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"0"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"POINTS"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"1"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"LINES"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"2"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"LINE_LOOP"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"LINE_STRIP"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"4"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TRIANGLES"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"5"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TRIANGLE_STRIP"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"6"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TRIANGLE_FAN"})})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"typical-attributes",children:"Typical Attributes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Attribute"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"indices"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"array"}),", optional) An array of numbers describing the vertex indices for each face."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"positions"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"array"}),", optional) An array of floats that describe the vertices of the model."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"normals"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"array"}),", optional) An array of floats that describe the normals of the model."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"texCoords"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"mixed"}),", optional) Can be an array of floats indicating the texture coordinates for the texture to be used or an object that has texture ids as"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"colors"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"array"}),", optional) An array of colors in RGBA. If just one color is specified that color will be used for all faces."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"pickingColors"})}),(0,s.jsxs)(r.td,{children:["(",(0,s.jsx)(r.em,{children:"array"}),", optional) A custom set of colors to render the object to texture when performing the color picking algorithm."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["The Geometry class does not take a ",(0,s.jsx)(r.code,{children:"WebGLRenderingContext"})," and is intentionally"]}),"\n",(0,s.jsxs)(r.li,{children:["The ",(0,s.jsx)(r.code,{children:"Geometry"})," class holds the ",(0,s.jsx)(r.a,{href:"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0",children:'glTF2 "primitive" specification'}),", although morph ",(0,s.jsx)(r.code,{children:"targets"})," are not yet supported."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5251:(e,r,t)=>{var s=t(7294),i=Symbol.for("react.element"),n=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,d=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,r,t){var s,n={},l=null,a=null;for(s in void 0!==t&&(l=""+t),void 0!==r.key&&(l=""+r.key),void 0!==r.ref&&(a=r.ref),r)o.call(r,s)&&!c.hasOwnProperty(s)&&(n[s]=r[s]);if(e&&e.defaultProps)for(s in r=e.defaultProps)void 0===n[s]&&(n[s]=r[s]);return{$$typeof:i,type:e,key:l,ref:a,props:n,_owner:d.current}}r.Fragment=n,r.jsx=l,r.jsxs=l},5893:(e,r,t)=>{e.exports=t(5251)},1151:(e,r,t)=>{t.d(r,{Z:()=>d,a:()=>o});var s=t(7294);const i={},n=s.createContext(i);function o(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);