/*! For license information please see fb96e78d.5e5e7054.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[5702],{9926:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var s=r(4848),a=r(8453);const t={},o="Using Transforms",i={id:"api-guide/engine/transforms",title:"Using Transforms",description:"Note this documentation has not yet been updated to the luma.gl v9 API",source:"@site/../docs/api-guide/engine/transforms.md",sourceDirName:"api-guide/engine",slug:"/api-guide/engine/transforms",permalink:"/luma.gl/docs/api-guide/engine/transforms",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-guide/engine/transforms.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Shader Transpilation",permalink:"/luma.gl/docs/api-guide/shaders/shader-transpilation"},next:{title:"Overview",permalink:"/luma.gl/docs/api-reference/"}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"Use case : Specify source and destination buffers.",id:"use-case--specify-source-and-destination-buffers",level:3},{value:"Use case : Create destination buffers automatically.",id:"use-case--create-destination-buffers-automatically",level:3},{value:"Use case : Multiple iterations using swap().",id:"use-case--multiple-iterations-using-swap",level:3},{value:"Use case : Update one or more buffers using update() method..",id:"use-case--update-one-or-more-buffers-using-update-method",level:3}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"using-transforms",children:"Using Transforms"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Note this documentation has not yet been updated to the luma.gl v9 API"})}),"\n",(0,s.jsx)(n.p,{children:"Transform operations represent a GPGPU/GPU compute technique where GPU draw calls are configured\nso that they write some specified outputs from the vertex shaders to (one or more) GPU memory buffers\nthat have been provided by the application."}),"\n",(0,s.jsxs)(n.p,{children:["Applications use transform feedback to data processing from CPU to GPU, where multiple\nparallel execution units will be used for processing.\nData is handled in form of ",(0,s.jsx)(n.code,{children:"Buffer"})," objects, i.e. data resides in the GPU memory."]}),"\n",(0,s.jsxs)(n.p,{children:["Transform Feedback operations write their output into ",(0,s.jsx)(n.code,{children:"Buffer"})," instances.\nThese buffers can then be directly set as attributes on ",(0,s.jsx)(n.code,{children:"Model"})," or ",(0,s.jsx)(n.code,{children:"VertexArray"})," for regular rendering operations."]}),"\n",(0,s.jsx)(n.p,{children:"Buffers can be read back to the CPU, but this has a high performance penalty.\nIdeally, the application's logic can be designed so that CPU access is not required which avoids expensive CPU and GPU sync."}),"\n",(0,s.jsx)(n.p,{children:"To run a single transform feedback operation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a ",(0,s.jsx)(n.code,{children:"Program"})," or a ",(0,s.jsx)(n.code,{children:"Model"})," with varyings (",(0,s.jsx)(n.code,{children:"out"})," variables) declared in the vertex shader's GLSL code, and provide the names of these varyings to the ",(0,s.jsx)(n.code,{children:"Program"})," constructor."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"Program.draw()"})," or ",(0,s.jsx)(n.code,{children:"Model.draw()"})," with a ",(0,s.jsx)(n.code,{children:"transformFeedback"})," parameter."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Model.transform()"})," is equivalent to ",(0,s.jsx)(n.code,{children:"Model.draw()"})," but automatically turns off the fragment shader stage."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, the more powerful ",(0,s.jsx)(n.code,{children:"Transform"})," class is preferable if you don't want to deal with setting up ",(0,s.jsx)(n.code,{children:"Program"})," and ",(0,s.jsx)(n.code,{children:"TransformFeedback"})," instances, or if intend to run a repeating, double buffered transform feedback loop."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import {Transform} from '@luma.gl/engine';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-case--specify-source-and-destination-buffers",children:"Use case : Specify source and destination buffers."}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"Transform"})," object by passing, vs (vertex shader), source buffer(s), varyings (output variable names in vertex shader) and destination buffers. Then call ",(0,s.jsx)(n.code,{children:"run"})," to perform one transform feedback iteration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const VS = `\\\n#version 300 es\nattribute float inValue;\nvarying float outValue;\n\nvoid main()\n{\n  outValue = 2.0 * inValue;\n}\n`;\n\nconst sourceData = new Float32Array([10, 20, 31, 0, -57]);\nconst sourceBuffer = device.createBuffer({data: sourceData});\n\n// Default values applied for size (1) and type (gl.FLOAT)\nconst feedbackBuffer = device.createBuffer({byteLength: sourceData.length * 4});\n\nconst transform = new Transform(device, {\n  sourceBuffers: {\n    inValue: sourceBuffer\n  },\n  feedbackBuffers: {\n    outValue: feedbackBuffer\n  },\n  vs: VS,\n  varyings: ['outValue'],\n  elementCount: 5\n});\n\n// Perform one transform feedback iteration\ntransform.run();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-case--create-destination-buffers-automatically",children:"Use case : Create destination buffers automatically."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Transform"})," can internally create destination buffers (i.e. feedback buffers), when ",(0,s.jsx)(n.code,{children:"feedbackMap"})," is provided. Each destination buffer is created with same settings and layout as corresponding source buffer as per ",(0,s.jsx)(n.code,{children:"feedbackMap"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const transform = new Transform(device, {\n  sourceBuffers: {\n    inValue: sourceBuffer\n  },\n  feedbackMap: {\n    inValue: 'outValue'\n  },\n  vs: VS,\n  varyings: ['outValue'],\n  elementCount: 5\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-case--multiple-iterations-using-swap",children:"Use case : Multiple iterations using swap()."}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"feedbackMap"})," is specified buffers can be swapped using a single call to ",(0,s.jsx)(n.code,{children:"swap()"}),", this is useful for cases like particle simulation, where output of one transform feedback iteration is piped as input to the next iteration."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Setup Transform with `souceDestinationMap` as above\n\ntransform.run();\n\nlet bufferWithNewValues = transform.getBuffer('outValue');\n...\n// Render using 'bufferWithNewValues'\n...\n\n//swap buffers\ntransform.swap();\ntransform.run();\nbufferWithNewValues = transform.getBuffer('outValue');\n...\n// Render using 'bufferWithNewValues'\n...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-case--update-one-or-more-buffers-using-update-method",children:"Use case : Update one or more buffers using update() method.."}),"\n",(0,s.jsxs)(n.p,{children:["Once ",(0,s.jsx)(n.code,{children:"Transform"})," object is constructed and used, one or more source or destination buffers can be updated using ",(0,s.jsx)(n.code,{children:"update"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// transform is set up as above\n...\n\n// update buffer binding for 'inValue' attribute\nconst newSourceBuffer = new Buffer(gl, {data: newSourceData});\ntransform.update({\n  sourceBuffers: {\n    inValue: newSourceBuffer\n  }\n});\n\n// now data is provided from newly bound buffer.\ntransform.run();\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},1020:(e,n,r)=>{var s=r(6540),a=Symbol.for("react.element"),t=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,i=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function d(e,n,r){var s,t={},d=null,u=null;for(s in void 0!==r&&(d=""+r),void 0!==n.key&&(d=""+n.key),void 0!==n.ref&&(u=n.ref),n)o.call(n,s)&&!c.hasOwnProperty(s)&&(t[s]=n[s]);if(e&&e.defaultProps)for(s in n=e.defaultProps)void 0===t[s]&&(t[s]=n[s]);return{$$typeof:a,type:e,key:d,ref:u,props:t,_owner:i.current}}n.Fragment=t,n.jsx=d,n.jsxs=d},4848:(e,n,r)=>{e.exports=r(1020)},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(6540);const a={},t=s.createContext(a);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);