/*! For license information please see 1a4fd82b.0757b1f1.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[125],{8427:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=n(5893),s=n(1151);const i={},a="VertexArray",l={id:"api-guide/vertex-array",title:"VertexArray",description:"Unless you are writing framework level code, it is usually not necessary to create VertexArray instances in luma.gl applications. It is often simpler to just provides attributes directly to the Model class. Still, it can be useful to review this documentation to understand how attributes are handled by luma.gl under the hood.",source:"@site/../docs/api-guide/vertex-array.md",sourceDirName:"api-guide",slug:"/api-guide/vertex-array",permalink:"/luma.gl/docs/api-guide/vertex-array",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-guide/vertex-array.md",tags:[],version:"current",frontMatter:{}},c={},o=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"VertexArray.getDefaultArray() : VertexArray",id:"vertexarraygetdefaultarray--vertexarray",level:3},{value:"initialize(props : Object) : VertexArray",id:"initializeprops--object--vertexarray",level:3},{value:"setConstant",id:"setconstant",level:3},{value:"setBuffer(location: number, buffer : Buffer [, accessor : Object]) : VertexArray",id:"setbufferlocation-number-buffer--buffer--accessor--object--vertexarray",level:3},{value:"Types, Constants, Enumarations",id:"types-constants-enumarations",level:2},{value:"Attribute Accessors",id:"attribute-accessors",level:2}];function d(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"vertexarray",children:"VertexArray"}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["Unless you are writing framework level code, it is usually not necessary to create ",(0,t.jsx)(r.code,{children:"VertexArray"})," instances in luma.gl applications. It is often simpler to just provides attributes directly to the ",(0,t.jsx)(r.a,{href:"/docs/api-reference/engine/model",children:(0,t.jsx)(r.code,{children:"Model"})})," class. Still, it can be useful to review this documentation to understand how attributes are handled by luma.gl under the hood."]})}),"\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.code,{children:"VertexArray"})," object lets the application map a set of GPU buffers to shader locations and the index buffer.\nBy providing a vertexArray to a draw call, the buffers will be made available as input data to shaders,"]}),"\n",(0,t.jsxs)(r.p,{children:["Using multiple ",(0,t.jsx)(r.code,{children:"VertexArray"})," makes it easy for applications to reuse the same shaders."]}),"\n",(0,t.jsx)(r.p,{children:"Remarks:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["WebGPU - WebGPU does not provide a native VertexArray type resource. In WebGPU, ",(0,t.jsx)(r.code,{children:"VertexArray"})," is just a convenience class that groups all attribute and index buffer bindings for a draw call."]}),"\n",(0,t.jsx)(r.li,{children:"WebGL -"}),"\n",(0,t.jsxs)(r.li,{children:["WebGL2 - see the ",(0,t.jsx)(r.a,{href:"https://www.khronos.org/opengl/wiki/Vertex_Specification#Vertex_Array_Object",children:"OpenGL Wiki"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(r.p,{children:["Import the ",(0,t.jsx)(r.code,{children:"VertexArray"})," class so that your app can use it:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import {VertexArray} from '@luma.gl/core';\n"})}),"\n",(0,t.jsx)(r.p,{children:"Create a new VertexArray"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const vertexArray = device.createVertexArray();\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adding attributes to a VertexArray"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const vertexArray = device.createVertexArray();\nvertexArray.setBuffer(location, buffer);\n"})}),"\n",(0,t.jsx)(r.p,{children:"Deleting a VertexArray"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"vertexArrayObject.destroy();\n"})}),"\n",(0,t.jsx)(r.p,{children:"Setting a constant vertex attribute"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import {VertexArray} from '@luma.gl/core';\nconst vertexArray = device.createVertexArray();\nvertexArray.setConstant(0, [0, 0, 0]);\n"})}),"\n",(0,t.jsx)(r.p,{children:"To discover how many attribute locations are available on the current system"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const maxVertesAttributes = device.limits.maxVertexAttributes;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"VertexArray"})," inherits from ",(0,t.jsx)(r.code,{children:"Resource"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"device.createVertexArray(gl : WebGLRenderingContext, props : Object)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Creates a new VertexArray"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"props"})," (Object) - passed through to ",(0,t.jsx)(r.code,{children:"Resource"})," superclass constructor and to ",(0,t.jsx)(r.code,{children:"initialize"})]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"vertexarraygetdefaultarray--vertexarray",children:"VertexArray.getDefaultArray() : VertexArray"}),"\n",(0,t.jsxs)(r.p,{children:['Returns the "global" ',(0,t.jsx)(r.code,{children:"VertexArray"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Note: The global ",(0,t.jsx)(r.code,{children:"VertexArray"})," object is always available. Binds the ",(0,t.jsx)(r.code,{children:"null"})," VertexArray."]}),"\n",(0,t.jsx)(r.h3,{id:"initializeprops--object--vertexarray",children:"initialize(props : Object) : VertexArray"}),"\n",(0,t.jsxs)(r.p,{children:["Reinitializes a ",(0,t.jsx)(r.code,{children:"VertexArray"}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"attributes"}),"=",(0,t.jsx)(r.code,{children:"{}"})," (",(0,t.jsx)(r.code,{children:"Object"}),") - map of attributes, can be keyed by index or names, can be constants (small arrays), ",(0,t.jsx)(r.code,{children:"Buffer"}),", arrays or typed arrays of numbers, or attribute descriptors."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"elements"}),"=",(0,t.jsx)(r.code,{children:"null"})," (",(0,t.jsx)(r.code,{children:"Buffer"}),") - optional buffer representing elements array (i.e. indices)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"program"})," - Transfers information on vertex attribute locations and types to this vertex array."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"setconstant",children:"setConstant"}),"\n",(0,t.jsxs)(r.p,{children:["Sets a constant value for a vertex attribute. When this ",(0,t.jsx)(r.code,{children:"VertexArray"})," is used in a ",(0,t.jsx)(r.code,{children:"Program.draw()"})," call, all Vertex Shader invocations will get the same value."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"vertexArray.setConstant(location: number, constant: NumberArray) : VertexArray\n"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"location"})," - index of the attribute"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"array"})," - the constant value"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Remarks:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["WebGL APIs: ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib",children:(0,t.jsx)(r.code,{children:"vertexAttrib4[u]{f,i}v"})})]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"setbufferlocation-number-buffer--buffer--accessor--object--vertexarray",children:"setBuffer(location: number, buffer : Buffer [, accessor : Object]) : VertexArray"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"setBuffer(location: number, buffer : Buffer [, accessor : Object]) : VertexArray\n"})}),"\n",(0,t.jsx)(r.p,{children:"Binds the specified attribute in this vertex array to the supplied buffer"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Set a location in vertex attributes array to a buffer, specifying"}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"its data layout and integer to float conversion and normalization flags"}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"location"})," (",(0,t.jsx)(r.em,{children:"GLuint"})," | ",(0,t.jsx)(r.em,{children:"String"}),") - index/ordinal number of the attribute"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"buffer"})," (",(0,t.jsx)(r.em,{children:"WebGLBuffer"}),"|",(0,t.jsx)(r.em,{children:"Buffer"}),") - WebGL buffer to set as value"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Remarks:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["WebGL APIs ",(0,t.jsx)(r.code,{children:"gl.vertexAttrib{I}Pointer"}),", ",(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor",children:"gl.vertexAttribDivisor"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"types-constants-enumarations",children:"Types, Constants, Enumarations"}),"\n",(0,t.jsx)(r.h2,{id:"attribute-accessors",children:"Attribute Accessors"}),"\n",(0,t.jsxs)(r.p,{children:["When setting ",(0,t.jsx)(r.code,{children:"Buffer"})," attributes, additional data can be provided to specify how the buffer should be accessed. This data can be stored directly on the ",(0,t.jsx)(r.code,{children:"Buffer"})," accessor or supplied to ",(0,t.jsx)(r.code,{children:".setBuffer"}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"target"}),"=",(0,t.jsx)(r.code,{children:"buffer.target"})," (",(0,t.jsx)(r.em,{children:"GLuint"}),", ) - which target to bind to"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"size"})," (",(0,t.jsx)(r.em,{children:"GLuint"}),") - number of values (components) per element (1-4)"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"type"})," (",(0,t.jsx)(r.em,{children:"GLuint"}),") - type of values (e.g. gl.FLOAT)"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"normalized"})," (",(0,t.jsx)(r.em,{children:"boolean"}),", false) - normalize integers to [-1,1] or [0,1]"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"integer"})," (",(0,t.jsx)(r.em,{children:"boolean"}),", false) - ",(0,t.jsx)(r.code,{children:"WebGL 2"})," disable int-to-float conversion"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"stride"})," (",(0,t.jsx)(r.em,{children:"GLuint"}),", 0) - supports strided arrays"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"offset"})," (",(0,t.jsx)(r.em,{children:"GLuint"}),", 0) - supports strided arrays"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"layout.normalized"}),"=",(0,t.jsx)(r.code,{children:"false"})," (GLbool) - normalize integers to [-1,1], [0,1]"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"layout.integer"}),"=",(0,t.jsx)(r.code,{children:"false"})," (GLuint) - WebGL 2 only, disable int-to-float conv."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"divisor"})," - Sets the frequency divisor used for instanced rendering (instances that pass between updates of attribute). Usually simply set to 1 or 0 to enable/disable instanced rendering. 0 disables instancing, >=1 enables it."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Notes:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The application can enable normalization by setting the ",(0,t.jsx)(r.code,{children:"normalized"})," flag to ",(0,t.jsx)(r.code,{children:"true"})," in the ",(0,t.jsx)(r.code,{children:"setBuffer"})," call."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"WebGL 2"})," The application can disable integer to float conversion when running under WebGL 2, by setting the ",(0,t.jsx)(r.code,{children:"integer"})," flag to ",(0,t.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer",children:(0,t.jsx)(r.code,{children:"glVertexAttribIPointer"})})," specifies ",(0,t.jsx)(r.em,{children:"integer"})," data formats and locations of vertex attributes. Values are always left as integer values. Only accepts the integer types gl.BYTE, gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Notes about Instanced Rendering"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["An attribute is referred to as ",(0,t.jsx)(r.strong,{children:"instanced"})," if its divisor value is non-zero."]}),"\n",(0,t.jsx)(r.li,{children:"The divisor modifies the rate at which vertex attributes advance when rendering multiple instances of primitives in a single draw call."}),"\n",(0,t.jsx)(r.li,{children:"If divisor is zero, the attribute at slot index advances once per vertex."}),"\n",(0,t.jsx)(r.li,{children:"If divisor is non-zero, the attribute advances once per divisor instances of the set(s) of vertices being rendered."}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5251:(e,r,n)=>{var t=n(7294),s=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,l=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function o(e,r,n){var t,i={},o=null,d=null;for(t in void 0!==n&&(o=""+n),void 0!==r.key&&(o=""+r.key),void 0!==r.ref&&(d=r.ref),r)a.call(r,t)&&!c.hasOwnProperty(t)&&(i[t]=r[t]);if(e&&e.defaultProps)for(t in r=e.defaultProps)void 0===i[t]&&(i[t]=r[t]);return{$$typeof:s,type:e,key:o,ref:d,props:i,_owner:l.current}}r.Fragment=i,r.jsx=o,r.jsxs=o},5893:(e,r,n)=>{e.exports=n(5251)},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>a});var t=n(7294);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);