/*! For license information please see d258a5e3.2234eb89.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[5097],{9594:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var r=s(5893),d=s(1151);const i={},o="Shader Modules",l={id:"api-guide/shader-modules",title:"Shader Modules",description:'luma.device provides a GLSL shader module system (through the @luma.device/shadertools module) that allows you build modular shaders. The system is built around a GLSL "assembler", and addresses the lack of a module/import system in the GLSL language. The shader assembler allows you to import chunks of reusable shader code from separately defined shader fragments into your shader program source code, which allows you to organize your shader code in reusable modules.',source:"@site/../docs/api-guide/shader-modules.md",sourceDirName:"api-guide",slug:"/api-guide/shader-modules",permalink:"/luma.gl/docs/api-guide/shader-modules",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-guide/shader-modules.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Using Transforms",permalink:"/luma.gl/docs/api-guide/transforms"},next:{title:"Overview",permalink:"/luma.gl/docs/api-reference/"}},t={},a=[{value:"Usage",id:"usage",level:2},{value:"Structure of a Shader Module",id:"structure-of-a-shader-module",level:2},{value:"Shader Module Type",id:"shader-module-type",level:3},{value:"Shader Module Descriptor",id:"shader-module-descriptor",level:3},{value:"GLSL Code",id:"glsl-code",level:3},{value:"getUniforms",id:"getuniforms",level:3},{value:"uniforms",id:"uniforms",level:3},{value:"inject",id:"inject",level:2},{value:"GLSL Versions",id:"glsl-versions",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"shader-modules",children:"Shader Modules"}),"\n",(0,r.jsxs)(n.p,{children:["luma.device provides a GLSL shader module system (through the ",(0,r.jsx)(n.code,{children:"@luma.device/shadertools"}),' module) that allows you build modular shaders. The system is built around a GLSL "assembler", and addresses the lack of a module/import system in the GLSL language. The shader assembler allows you to import chunks of reusable shader code from separately defined shader fragments into your shader program source code, which allows you to organize your shader code in reusable modules.']}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Enables you to import and "inject" prepackaged modules of shader code into your shaders.'}),"\n",(0,r.jsx)(n.li,{children:"Allows you to package up reusable GLSL code as shader modules."}),"\n",(0,r.jsx)(n.li,{children:"Adds GPU detection and a measure of portability your shaders."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["To add/inject existing modules into your shaders, just add the modules parameter to your ",(0,r.jsx)(n.code,{children:"assembleShaders"})," call:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import {shaderModule} from 'library-of-shader-modules';\nconst {vs, fs, getUniforms, moduleMap} = assembleShaders(device, {\n  fs: '...',\n  vs: '...',\n  modules: [shaderModule],\n  ...\n})\n"})}),"\n",(0,r.jsx)(n.p,{children:"To create a new shader module, you need to create a descriptor object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const MY_SHADER_MODULE = {\n  name: 'my-shader-module',\n  vs: ....\n  fs: null,\n  inject: {},\n  dependencies: [],\n  deprecations: [],\n  getUniforms\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"This object can be used as shader module directly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"assembleShaders(device, {..., modules: [MY_SHADER_MODULE]});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"structure-of-a-shader-module",children:"Structure of a Shader Module"}),"\n",(0,r.jsx)(n.h3,{id:"shader-module-type",children:"Shader Module Type"}),"\n",(0,r.jsx)(n.p,{children:"A shader module is either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Generic"})," - a set of generic GLSL functions that can be included either in a fragment shader or a vertex shader (or both). The ",(0,r.jsx)(n.code,{children:"fp64"})," module is a good example of this type of module."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Functional"}),' - Contains specific vertex and/or fragment shader "chunks", often set up so that the vertex shader part sets up a ',(0,r.jsx)(n.code,{children:"varying"})," used by the fragment shader part."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"shader-module-descriptor",children:"Shader Module Descriptor"}),"\n",(0,r.jsx)(n.p,{children:"To define a new shader module, you create a descriptor object that brings together all the necessary pieces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const MY_SHADER_MODULE = {\n  name: 'my-shader-module',\n  vs: '...',\n  fs: '...',\n  inject: {},\n  dependencies: [],\n  deprecations: [],\n  getUniforms\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Descriptor objects can define the following fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (",(0,r.jsx)(n.em,{children:"String"}),", Required) - The name of the shader module."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"vs"})," - (String | null)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fs"})," - (String | null)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getUniforms"})," JavaScript function that maps JavaScript parameter keys to uniforms used by this module"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uniforms"})," (",(0,r.jsx)(n.em,{children:"Object"}),") - a light alternative to ",(0,r.jsx)(n.code,{children:"getUniforms"}),", see below"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inject"})," (",(0,r.jsx)(n.em,{children:"Object"}),") - injections the module will make into shader hooks, see below"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dependencies"})," (",(0,r.jsx)(n.em,{children:"Array"}),") - a list of other shader modules that this module is dependent on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deprecations"})," (",(0,r.jsx)(n.em,{children:"Array"}),") - a list of deprecated APIs."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"deprecations"})," is supplied, ",(0,r.jsx)(n.code,{children:"assembleShaders"})," will scan GLSL source code for the deprecated constructs and issue a console warning if found. Each API is described in the following format:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"}),": ",(0,r.jsx)(n.code,{children:"uniform <type>"})," or ",(0,r.jsx)(n.code,{children:"function"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"old"}),": name of the deprecated uniform/function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"new"}),": name of the new uniform/function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deprecated"}),": whether the old API is still supported."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"glsl-code",children:"GLSL Code"}),"\n",(0,r.jsx)(n.p,{children:"The GLSL code for a shader module typically contains:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a mix of uniform and varying declarations"}),"\n",(0,r.jsx)(n.li,{children:"one or more GLSL function definitions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getuniforms",children:"getUniforms"}),"\n",(0,r.jsx)(n.p,{children:"Each shader module provides a method to get a map of uniforms for the shader. This function will be called with two arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"opts"})," - the module settings to update. This argument may not be provided when ",(0,r.jsx)(n.code,{children:"getUniforms"})," is called to generate a set of default uniform values."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context"})," - the uniforms generated by this module's dependencies."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The function should return a JavaScript object with keys representing uniform names and values representing uniform values."}),"\n",(0,r.jsxs)(n.p,{children:["The function should expect the shape of the dependency uniforms to vary based on what's passed in ",(0,r.jsx)(n.code,{children:"opts"}),". This behavior is intended because we only want to recalculate a uniform if the uniforms that it depends on are changed. An example is the ",(0,r.jsx)(n.code,{children:"project"})," and ",(0,r.jsx)(n.code,{children:"project64"})," modules in deck.device. When ",(0,r.jsx)(n.code,{children:"opts.viewport"})," is provided, ",(0,r.jsx)(n.code,{children:"project64"})," will receive the updated projection matrix generated by the ",(0,r.jsx)(n.code,{children:"project"})," module. If ",(0,r.jsx)(n.code,{children:"opts.viewport"})," is empty, then the ",(0,r.jsx)(n.code,{children:"project"})," module generates nothing and so should ",(0,r.jsx)(n.code,{children:"project64"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"uniforms",children:"uniforms"}),"\n",(0,r.jsxs)(n.p,{children:["If the uniforms of this module can be directly pulled from user settings, they may declaratively defined by a ",(0,r.jsx)(n.code,{children:"uniforms"})," object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  name: 'my-shader-module',\n  uniforms: {\n    strength: {type: 'number', value: 1, min: 0, max: 1},\n    center: [0.5, 0.5]\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["At runtime, this map will be used to generate the uniforms needed by the shaders. If either ",(0,r.jsx)(n.code,{children:"strength"})," or ",(0,r.jsx)(n.code,{children:"center"})," is present in the user's module settings, then the user's value will be used; otherwise, the default value in the original definition will be used."]}),"\n",(0,r.jsx)(n.p,{children:"Each uniform definition may contain the following fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (",(0,r.jsx)(n.em,{children:"String"}),") - one of ",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"array"})," or ",(0,r.jsx)(n.code,{children:"object"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," - the default value of this uniform"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.code,{children:"type: 'number'"}),", the following additional fields may be added for validation:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"min"})," (",(0,r.jsx)(n.em,{children:"Number"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"max"})," (",(0,r.jsx)(n.em,{children:"Number"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note: ",(0,r.jsx)(n.code,{children:"uniforms"})," is ignored if ",(0,r.jsx)(n.code,{children:"getUniforms"})," is provided."]}),"\n",(0,r.jsx)(n.h2,{id:"inject",children:"inject"}),"\n",(0,r.jsxs)(n.p,{children:["A map of hook function signatures to either the injection code string, or an object containing the injection code and an ",(0,r.jsx)(n.code,{children:"order"})," option indicating ordering within the hook function. See ",(0,r.jsx)(n.a,{href:"/docs/api-reference/shadertools/shader-assembler",children:"assembleShaders"})," documentation for more information on shader hooks."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"{\n  picking: {\n    'vs:VERTEX_HOOK_FUNCTION': 'picking_setPickingColor(color.rgb);',\n    'fs:FRAGMENT_HOOK_FUNCTION': {\n      injection: 'color = picking_filterColor(color);',\n      order: Number.POSITIVE_INFINITY\n    },\n    'fs:#main-end': 'gl_FragColor = picking_filterColor(gl_FragColor);'\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"glsl-versions",children:"GLSL Versions"}),"\n",(0,r.jsxs)(n.p,{children:["Shader modules will undergo some basic text transformations in order to match the GLSL version of the shaders they are injected into. These transformations are generally limited to the naming of input variables, output variables and texture sampling functions. See ",(0,r.jsx)(n.a,{href:"/docs/api-reference/shadertools/shader-assembler",children:"assembleShaders"})," documentation for more information."]})]})}function h(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},5251:(e,n,s)=>{var r=s(7294),d=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,t={key:!0,ref:!0,__self:!0,__source:!0};function a(e,n,s){var r,i={},a=null,c=null;for(r in void 0!==s&&(a=""+s),void 0!==n.key&&(a=""+n.key),void 0!==n.ref&&(c=n.ref),n)o.call(n,r)&&!t.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:d,type:e,key:a,ref:c,props:i,_owner:l.current}}n.Fragment=i,n.jsx=a,n.jsxs=a},5893:(e,n,s)=>{e.exports=s(5251)},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var r=s(7294);const d={},i=r.createContext(d);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);