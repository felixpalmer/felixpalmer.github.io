/*! For license information please see 5b67d059.808731bd.js.LICENSE.txt */
"use strict";(self.webpackChunkwebsite_docusaurus=self.webpackChunkwebsite_docusaurus||[]).push([[1252],{4892:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=n(5893),d=n(1151);const t={},i="Model",l={id:"api-reference/engine/model",title:"Model",description:"The Model class is the centerpiece of the luma.gl API. It brings together all the different functionality needed to run shaders and perform draw calls in a single, easy-to-use interface.",source:"@site/../docs/api-reference/engine/model.md",sourceDirName:"api-reference/engine",slug:"/api-reference/engine/model",permalink:"/luma.gl/docs/api-reference/engine/model",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/luma.gl/tree/main/docs/../docs/api-reference/engine/model.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Geometry",permalink:"/luma.gl/docs/api-reference/engine/geometry/"},next:{title:"PipelineFactory",permalink:"/luma.gl/docs/api-reference/engine/pipeline-factory"}},o={},c=[{value:"Usage",id:"usage",level:2},{value:"Provide attribute data using Buffer",id:"provide-attribute-data-using-buffer",level:3},{value:"Types",id:"types",level:2},{value:"ModelProps",id:"modelprops",level:3},{value:"Properties",id:"properties",level:2},{value:"renderPipeline: RenderPipeline",id:"renderpipeline-renderpipeline",level:3},{value:"onBeforeRender",id:"onbeforerender",level:3},{value:"onAfterRender",id:"onafterrender",level:3},{value:"instanceCount: number",id:"instancecount-number",level:3},{value:"vertexCount: number",id:"vertexcount-number",level:3},{value:"Methods",id:"methods",level:2},{value:"constructor(device: Device, props: ModelProps)",id:"constructordevice-device-props-modelprops",level:3},{value:"destroy(): void",id:"destroy-void",level:3},{value:"draw(options: DrawOptions): boolean",id:"drawoptions-drawoptions-boolean",level:3},{value:"setDrawMode(); this",id:"setdrawmode-this",level:3},{value:"setVertexCount(); this",id:"setvertexcount-this",level:3},{value:"setInstanceCount(); this",id:"setinstancecount-this",level:3},{value:"setGeometry(); this",id:"setgeometry-this",level:3},{value:"setAttributes(attributes: object); this",id:"setattributesattributes-object-this",level:3},{value:"setUniforms(uniforms: object): void",id:"setuniformsuniforms-object-void",level:3},{value:"updateModuleSettings(moduleSettings: object): void",id:"updatemodulesettingsmodulesettings-object-void",level:3},{value:"Remarks",id:"remarks",level:2}];function a(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"model",children:"Model"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Model"})," class is the centerpiece of the luma.gl API. It brings together all the different functionality needed to run shaders and perform draw calls in a single, easy-to-use interface."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"render pipeline creation"})," -"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"attributes"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"bindings"})," these can reference textures and uniform buffers"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"uniforms"})," WebGL only uniforms"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"shader module injection"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"shader transpilation"}),"**"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"debugging"})," - Detailed debug logging of draw calls"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Model"})," class integrates with the ",(0,s.jsx)(r.code,{children:"@luma.gl/shadertools"})," shader module system: ",(0,s.jsxs)(r.a,{href:"/docs/api-reference/shadertools/shader-assembler",children:["see ",(0,s.jsx)(r.code,{children:"Shader Assembly"})]}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["(Accepts a [",(0,s.jsx)(r.code,{children:"Mesh"}),"] or a [",(0,s.jsx)(r.code,{children:"Geometry"}),"](/docs/- - api-reference/engine/geometry) instance, plus any additional attributes for instanced rendering)"]}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import {Model} from `@luma.gl/engine`;\n"})}),"\n",(0,s.jsx)(r.p,{children:"One of the simplest way to provide attribute data is by using a Geometry object."}),"\n",(0,s.jsx)(r.p,{children:"Create model object by passing shaders, uniforms, geometry and render it by passing updated uniforms."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import {Model, CubeGeometry} from `@luma.gl/engine`;\n// construct the model.\nconst model = new Model(device, {\n  vs: VERTEX_SHADER,\n  fs: FRAGMENT_SHADER,\n  geometry: new CubeGeometry(),\n  bindings: {\n    uSampler: texture\n  },\n})\n"})}),"\n",(0,s.jsx)(r.h3,{id:"provide-attribute-data-using-buffer",children:"Provide attribute data using Buffer"}),"\n",(0,s.jsxs)(r.p,{children:["When using ",(0,s.jsx)(r.code,{children:"Buffer"})," objects, data remains on GPU and same ",(0,s.jsx)(r.code,{children:"Buffer"})," object can be shared between multiple models."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// construct the model.\nconst model = new Model(device, {\n  vs: VERTEX_SHADER,\n  fs: FRAGMENT_SHADER,\n  topology: 'triangle-list',\n  vertexCount: 3,\n  attributes: {\n    attributeName1: bufferObject,\n    attributeName2: device.createBuffer(new Float32Array(...))\n  },\n  uniforms: {uSampler: texture},\n})\n\n"})}),"\n",(0,s.jsxs)(r.p,{children:["On each frame, call the ",(0,s.jsx)(r.code,{children:"model.draw()"})," function after updating any uniforms (typically matrices)."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"model.setUniforms({\n  uPMatrix: currentProjectionMatrix,\n  uMVMatrix: current ModelViewMatrix\n});\nmodel.draw();\n"})}),"\n",(0,s.jsx)(r.h2,{id:"types",children:"Types"}),"\n",(0,s.jsx)(r.h3,{id:"modelprops",children:"ModelProps"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Property"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vs"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"Shader"})," | ",(0,s.jsx)(r.em,{children:"string"})]}),(0,s.jsx)(r.td,{children:"A vertex shader object, or source as a string."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"fs"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"Shader"})," | ",(0,s.jsx)(r.em,{children:"string"})]}),(0,s.jsx)(r.td,{children:"A fragment shader object, or source as a string."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"modules"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"shader modules to be applied (shadertools)."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"programManager"})}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"ProgramManager"})," to use for program creation and caching."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"varyings"})}),(0,s.jsx)(r.td,{children:"(WebGL 2)"}),(0,s.jsx)(r.td,{children:"An array of vertex shader output variables, that needs to be recorded (used in TransformFeedback flow)."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"bufferMode"})}),(0,s.jsx)(r.td,{children:"(WebGL 2)"}),(0,s.jsxs)(r.td,{children:["Mode to be used when recording vertex shader outputs (used in TransformFeedback flow). Default value is ",(0,s.jsx)(r.code,{children:"GL.SEPARATE_ATTRIBS"}),"."]})]})]})]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"ModelProps"})," passes through ",(0,s.jsx)(r.code,{children:"RenderPipelineProps"})]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Property"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"layout"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ShaderLayout"})}),(0,s.jsx)(r.td,{children:"Describes how shader attributes and bindings are laid out."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"topology?"})}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"'point-list'"}),", ",(0,s.jsx)(r.code,{children:"'line-list'"}),", ",(0,s.jsx)(r.code,{children:"'line-strip'"}),", ",(0,s.jsx)(r.code,{children:"'triangle-list'"})," or ",(0,s.jsx)(r.code,{children:"'triangle-strip'"}),","]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"parameters?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"RenderPipelineParameters"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Property"}),(0,s.jsx)(r.td,{children:"Type"}),(0,s.jsx)(r.td,{children:"Description"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"-----------------"}),(0,s.jsx)(r.td,{children:"------------------------"}),(0,s.jsx)(r.td,{children:"-------------------------------------------------------------------"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vertexCount?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"instanceCount?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"moduleSettings?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Record<string, any>"})}),(0,s.jsx)(r.td,{children:"any values required by shader modules (will be mapped to uniforms)."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uniforms?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Record<string, any>"})}),(0,s.jsx)(r.td,{children:"any non-binding uniform values"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"bindings?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Record<string, any>"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"buffers?"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Record<string, Buffer>"})}),(0,s.jsx)(r.td,{})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(r.h3,{id:"renderpipeline-renderpipeline",children:"renderPipeline: RenderPipeline"}),"\n",(0,s.jsxs)(r.p,{children:["Get model's ",(0,s.jsx)(r.code,{children:"Program"})," instance"]}),"\n",(0,s.jsx)(r.h3,{id:"onbeforerender",children:"onBeforeRender"}),"\n",(0,s.jsx)(r.p,{children:"function to be called before every time this model is drawn."}),"\n",(0,s.jsx)(r.h3,{id:"onafterrender",children:"onAfterRender"}),"\n",(0,s.jsx)(r.p,{children:"function to be called after every time this model is drawn."}),"\n",(0,s.jsx)(r.h3,{id:"instancecount-number",children:"instanceCount: number"}),"\n",(0,s.jsx)(r.p,{children:"default value is 0."}),"\n",(0,s.jsx)(r.h3,{id:"vertexcount-number",children:"vertexCount: number"}),"\n",(0,s.jsxs)(r.p,{children:["when not provided will be deduced from ",(0,s.jsx)(r.code,{children:"geometry"})," object."]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"constructordevice-device-props-modelprops",children:"constructor(device: Device, props: ModelProps)"}),"\n",(0,s.jsx)(r.p,{children:"The constructor for the Model class. Use this to create a new Model."}),"\n",(0,s.jsx)(r.h3,{id:"destroy-void",children:"destroy(): void"}),"\n",(0,s.jsx)(r.p,{children:"Free GPU resources associated with this model immediately, instead of waiting for garbage collection."}),"\n",(0,s.jsx)(r.h3,{id:"drawoptions-drawoptions-boolean",children:"draw(options: DrawOptions): boolean"}),"\n",(0,s.jsx)(r.p,{children:"Renders the model with provided uniforms, attributes and samplers"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"model.draw({\n  renderPass,\n  moduleSettings = null,\n  uniforms = {},\n  attributes = {},\n  samplers = {},\n  parameters = {},\n  settings,\n  vertexArray = null,\n  transformFeedback = null\n});\n"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Model.draw()"})," calls ",(0,s.jsx)(r.code,{children:"Program.draw()"})," but adds and extends the available parameters as follows:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"moduleSettings"}),"=",(0,s.jsx)(r.code,{children:"null"})," (Object) - any uniforms needed by shader modules."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"attributes"}),"=",(0,s.jsx)(r.code,{children:"{}"})," (Object) - attribute definitions to be used for drawing. In additions to ",(0,s.jsx)(r.code,{children:"Buffer"})," and constant values, ",(0,s.jsx)(r.code,{children:"Model"}),"s can also accept typed arrays and attribute descriptor objects which it converts to buffers."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"uniforms"}),"=",(0,s.jsx)(r.code,{children:"{}"})," (Object) - uniform values to be used for drawing. In addition to normal uniform values, ",(0,s.jsx)(r.code,{children:"Model"})," can also accept function valued uniforms which will be evaluated before every draw call."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"animationProps"})," (Object) - if any function valued uniforms are set on the ",(0,s.jsx)(r.code,{children:"Model"}),", ",(0,s.jsx)(r.code,{children:"animationProps"})," must be provided to the draw call. The ",(0,s.jsx)(r.code,{children:"animationProps"})," are passed as parameter to the uniform functions."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["The remaining draw options are passed directly to ",(0,s.jsx)(r.code,{children:"Program.draw()"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"uniforms"}),"=",(0,s.jsx)(r.code,{children:"{}"})," (Object) - uniform values to be used for drawing."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"samplers"}),"=",(0,s.jsx)(r.code,{children:"{}"})," (Object) - texture mappings to be used for drawing."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"parameters"}),"=",(0,s.jsx)(r.code,{children:"{}"})," (Object) - temporary gl settings to be applied to this draw call."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"framebuffer"}),"=",(0,s.jsx)(r.code,{children:"null"})," (",(0,s.jsx)(r.code,{children:"Framebuffer"}),") - if provided, renders into the supplied framebuffer, otherwise renders to the default framebuffer."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"transformFeedback"})," - an instance ",(0,s.jsx)(r.code,{children:"TranformFeedback"})," object, that gets activated for this rendering."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"vertexArray"})," - an instance of ",(0,s.jsx)(r.code,{children:"VertexArray"})," object, that holds required buffer bindings for vertex shader inputs."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"setdrawmode-this",children:"setDrawMode(); this"}),"\n",(0,s.jsxs)(r.p,{children:["Sets the WebGL ",(0,s.jsx)(r.code,{children:"drawMode"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"GL.POINTS"})," etc."]}),"\n",(0,s.jsx)(r.h3,{id:"setvertexcount-this",children:"setVertexCount(); this"}),"\n",(0,s.jsx)(r.p,{children:"Sets the number of vertices"}),"\n",(0,s.jsx)(r.h3,{id:"setinstancecount-this",children:"setInstanceCount(); this"}),"\n",(0,s.jsx)(r.p,{children:"How many instances will be rendered"}),"\n",(0,s.jsx)(r.h3,{id:"setgeometry-this",children:"setGeometry(); this"}),"\n",(0,s.jsxs)(r.p,{children:["Use a ",(0,s.jsx)(r.code,{children:"Geometry"})," instance to define attribute buffers"]}),"\n",(0,s.jsx)(r.h3,{id:"setattributesattributes-object-this",children:"setAttributes(attributes: object); this"}),"\n",(0,s.jsxs)(r.p,{children:["Sets map of attributes (passes through to ",(0,s.jsx)(r.a,{href:"/docs/api-reference/core/resources/vertex-array",children:"VertexArray.setAttributes"}),")"]}),"\n",(0,s.jsx)(r.h3,{id:"setuniformsuniforms-object-void",children:"setUniforms(uniforms: object): void"}),"\n",(0,s.jsx)(r.p,{children:"Stores named uniforms key, value"}),"\n",(0,s.jsx)(r.h3,{id:"updatemodulesettingsmodulesettings-object-void",children:"updateModuleSettings(moduleSettings: object): void"}),"\n",(0,s.jsx)(r.h2,{id:"remarks",children:"Remarks"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["The ",(0,s.jsx)(r.code,{children:"Model"})," class is arguably the most useful class for typical applications. It manages the WebGL resources needed to perform draw calls and provide additional functionality as described below."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,d.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5251:(e,r,n)=>{var s=n(7294),d=Symbol.for("react.element"),t=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function c(e,r,n){var s,t={},c=null,a=null;for(s in void 0!==n&&(c=""+n),void 0!==r.key&&(c=""+r.key),void 0!==r.ref&&(a=r.ref),r)i.call(r,s)&&!o.hasOwnProperty(s)&&(t[s]=r[s]);if(e&&e.defaultProps)for(s in r=e.defaultProps)void 0===t[s]&&(t[s]=r[s]);return{$$typeof:d,type:e,key:c,ref:a,props:t,_owner:l.current}}r.Fragment=t,r.jsx=c,r.jsxs=c},5893:(e,r,n)=>{e.exports=n(5251)},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>i});var s=n(7294);const d={},t=s.createContext(d);function i(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);